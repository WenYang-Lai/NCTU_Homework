Terminals unused in grammar

   BOOLEAN


Grammar

    0 $accept: program $end

    1 program: decl_list funct_def decl_and_def_list

    2 decl_list: decl_list var_decl
    3          | decl_list const_decl
    4          | decl_list funct_decl
    5          | %empty

    6 decl_and_def_list: decl_and_def_list var_decl
    7                  | decl_and_def_list const_decl
    8                  | decl_and_def_list funct_decl
    9                  | decl_and_def_list funct_def
   10                  | %empty

   11 funct_def: scalar_type ID L_PAREN R_PAREN compound_statement
   12          | scalar_type ID L_PAREN parameter_list R_PAREN compound_statement
   13          | VOID ID L_PAREN R_PAREN compound_statement
   14          | VOID ID L_PAREN parameter_list R_PAREN compound_statement

   15 funct_decl: scalar_type ID L_PAREN R_PAREN SEMICOLON
   16           | scalar_type ID L_PAREN parameter_list R_PAREN SEMICOLON
   17           | VOID ID L_PAREN R_PAREN SEMICOLON
   18           | VOID ID L_PAREN parameter_list R_PAREN SEMICOLON

   19 parameter_list: parameter_list COMMA scalar_type ID
   20               | parameter_list COMMA scalar_type array_decl
   21               | scalar_type array_decl
   22               | scalar_type ID

   23 var_decl: scalar_type identifier_list SEMICOLON

   24 identifier_list: identifier_list COMMA ID
   25                | identifier_list COMMA ID ASSIGN_OP logical_expression
   26                | identifier_list COMMA array_decl ASSIGN_OP initial_array
   27                | identifier_list COMMA array_decl
   28                | array_decl ASSIGN_OP initial_array
   29                | array_decl
   30                | ID ASSIGN_OP logical_expression
   31                | ID

   32 initial_array: L_BRACE literal_list R_BRACE

   33 literal_list: literal_list COMMA logical_expression
   34             | logical_expression
   35             | %empty

   36 const_decl: CONST scalar_type const_list SEMICOLON

   37 const_list: const_list COMMA ID ASSIGN_OP sign_literal_const
   38           | ID ASSIGN_OP sign_literal_const

   39 array_decl: ID dim

   40 dim: dim ML_BRACE INT_CONST MR_BRACE
   41    | ML_BRACE INT_CONST MR_BRACE

   42 compound_statement: L_BRACE var_const_stmt_list R_BRACE

   43 var_const_stmt_list: var_const_stmt_list statement
   44                    | var_const_stmt_list var_decl
   45                    | var_const_stmt_list const_decl
   46                    | %empty

   47 statement: compound_statement
   48          | simple_statement
   49          | conditional_statement
   50          | while_statement
   51          | for_statement
   52          | function_invoke_statement
   53          | jump_statement

   54 simple_statement: variable_reference ASSIGN_OP logical_expression SEMICOLON
   55                 | PRINT logical_expression SEMICOLON
   56                 | READ variable_reference SEMICOLON

   57 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE
   58                      | IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE

   59 while_statement: WHILE L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE
   60                | DO L_BRACE var_const_stmt_list R_BRACE WHILE L_PAREN logical_expression R_PAREN SEMICOLON

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

   62 initial_expression_list: initial_expression
   63                        | %empty

   64 initial_expression: initial_expression COMMA variable_reference ASSIGN_OP logical_expression
   65                   | initial_expression COMMA logical_expression
   66                   | logical_expression
   67                   | variable_reference ASSIGN_OP logical_expression

   68 control_expression_list: control_expression
   69                        | %empty

   70 control_expression: control_expression COMMA variable_reference ASSIGN_OP logical_expression
   71                   | control_expression COMMA logical_expression
   72                   | logical_expression
   73                   | variable_reference ASSIGN_OP logical_expression

   74 increment_expression_list: increment_expression
   75                          | %empty

   76 increment_expression: increment_expression COMMA variable_reference ASSIGN_OP logical_expression
   77                     | increment_expression COMMA logical_expression
   78                     | logical_expression
   79                     | variable_reference ASSIGN_OP logical_expression

   80 function_invoke_statement: ID L_PAREN logical_expression_list R_PAREN SEMICOLON
   81                          | ID L_PAREN R_PAREN SEMICOLON

   82 jump_statement: CONTINUE SEMICOLON
   83               | BREAK SEMICOLON
   84               | RETURN logical_expression SEMICOLON

   85 variable_reference: array_list
   86                   | ID

   87 logical_expression: logical_expression OR_OP logical_term
   88                   | logical_term

   89 logical_term: logical_term AND_OP logical_factor
   90             | logical_factor

   91 logical_factor: NOT_OP logical_factor
   92               | relation_expression

   93 relation_expression: relation_expression relation_operator arithmetic_expression
   94                    | arithmetic_expression

   95 relation_operator: LT_OP
   96                  | LE_OP
   97                  | EQ_OP
   98                  | GE_OP
   99                  | GT_OP
  100                  | NE_OP

  101 arithmetic_expression: arithmetic_expression ADD_OP term
  102                      | arithmetic_expression SUB_OP term
  103                      | term

  104 term: term MUL_OP factor
  105     | term DIV_OP factor
  106     | term MOD_OP factor
  107     | factor

  108 factor: sign_literal_const
  109       | element

  110 element: SUB_OP element
  111        | variable_reference
  112        | L_PAREN logical_expression R_PAREN
  113        | ID L_PAREN logical_expression_list R_PAREN
  114        | ID L_PAREN R_PAREN

  115 logical_expression_list: logical_expression_list COMMA logical_expression
  116                        | logical_expression

  117 array_list: ID dimension

  118 dimension: dimension ML_BRACE logical_expression MR_BRACE
  119          | ML_BRACE logical_expression MR_BRACE

  120 scalar_type: INT
  121            | DOUBLE
  122            | STRING
  123            | BOOL
  124            | FLOAT

  125 sign_literal_const: SUB_OP sign_literal_const
  126                   | literal_const

  127 literal_const: INT_CONST
  128              | FLOAT_CONST
  129              | SCIENTIFIC
  130              | STR_CONST
  131              | TRUE
  132              | FALSE


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 11 12 13 14 15 16 17 18 19 22 24 25 30 31 37 38 39 80 81 86
    113 114 117
INT_CONST (259) 40 41 127
FLOAT_CONST (260) 128
SCIENTIFIC (261) 129
STR_CONST (262) 130
LE_OP (263) 96
NE_OP (264) 100
GE_OP (265) 98
EQ_OP (266) 97
AND_OP (267) 89
OR_OP (268) 87
READ (269) 56
BOOLEAN (270)
WHILE (271) 59 60
DO (272) 60
IF (273) 57 58
ELSE (274) 58
TRUE (275) 131
FALSE (276) 132
FOR (277) 61
INT (278) 120
PRINT (279) 55
BOOL (280) 123
VOID (281) 13 14 17 18
FLOAT (282) 124
DOUBLE (283) 121
STRING (284) 122
CONTINUE (285) 82
BREAK (286) 83
RETURN (287) 84
CONST (288) 36
L_PAREN (289) 11 12 13 14 15 16 17 18 57 58 59 60 61 80 81 112 113
    114
R_PAREN (290) 11 12 13 14 15 16 17 18 57 58 59 60 61 80 81 112 113
    114
COMMA (291) 19 20 24 25 26 27 33 37 64 65 70 71 76 77 115
SEMICOLON (292) 15 16 17 18 23 36 54 55 56 60 61 80 81 82 83 84
ML_BRACE (293) 40 41 118 119
MR_BRACE (294) 40 41 118 119
L_BRACE (295) 32 42 57 58 59 60 61
R_BRACE (296) 32 42 57 58 59 60 61
ADD_OP (297) 101
SUB_OP (298) 102 110 125
MUL_OP (299) 104
DIV_OP (300) 105
MOD_OP (301) 106
ASSIGN_OP (302) 25 26 28 30 37 38 54 64 67 70 73 76 79
LT_OP (303) 95
GT_OP (304) 99
NOT_OP (305) 91


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
decl_list (53)
    on left: 2 3 4 5, on right: 1 2 3 4
decl_and_def_list (54)
    on left: 6 7 8 9 10, on right: 1 6 7 8 9
funct_def (55)
    on left: 11 12 13 14, on right: 1 9
funct_decl (56)
    on left: 15 16 17 18, on right: 4 8
parameter_list (57)
    on left: 19 20 21 22, on right: 12 14 16 18 19 20
var_decl (58)
    on left: 23, on right: 2 6 44
identifier_list (59)
    on left: 24 25 26 27 28 29 30 31, on right: 23 24 25 26 27
initial_array (60)
    on left: 32, on right: 26 28
literal_list (61)
    on left: 33 34 35, on right: 32 33
const_decl (62)
    on left: 36, on right: 3 7 45
const_list (63)
    on left: 37 38, on right: 36 37
array_decl (64)
    on left: 39, on right: 20 21 26 27 28 29
dim (65)
    on left: 40 41, on right: 39 40
compound_statement (66)
    on left: 42, on right: 11 12 13 14 47
var_const_stmt_list (67)
    on left: 43 44 45 46, on right: 42 43 44 45 57 58 59 60 61
statement (68)
    on left: 47 48 49 50 51 52 53, on right: 43
simple_statement (69)
    on left: 54 55 56, on right: 48
conditional_statement (70)
    on left: 57 58, on right: 49
while_statement (71)
    on left: 59 60, on right: 50
for_statement (72)
    on left: 61, on right: 51
initial_expression_list (73)
    on left: 62 63, on right: 61
initial_expression (74)
    on left: 64 65 66 67, on right: 62 64 65
control_expression_list (75)
    on left: 68 69, on right: 61
control_expression (76)
    on left: 70 71 72 73, on right: 68 70 71
increment_expression_list (77)
    on left: 74 75, on right: 61
increment_expression (78)
    on left: 76 77 78 79, on right: 74 76 77
function_invoke_statement (79)
    on left: 80 81, on right: 52
jump_statement (80)
    on left: 82 83 84, on right: 53
variable_reference (81)
    on left: 85 86, on right: 54 56 64 67 70 73 76 79 111
logical_expression (82)
    on left: 87 88, on right: 25 30 33 34 54 55 57 58 59 60 64 65 66
    67 70 71 72 73 76 77 78 79 84 87 112 115 116 118 119
logical_term (83)
    on left: 89 90, on right: 87 88 89
logical_factor (84)
    on left: 91 92, on right: 89 90 91
relation_expression (85)
    on left: 93 94, on right: 92 93
relation_operator (86)
    on left: 95 96 97 98 99 100, on right: 93
arithmetic_expression (87)
    on left: 101 102 103, on right: 93 94 101 102
term (88)
    on left: 104 105 106 107, on right: 101 102 103 104 105 106
factor (89)
    on left: 108 109, on right: 104 105 106 107
element (90)
    on left: 110 111 112 113 114, on right: 109 110
logical_expression_list (91)
    on left: 115 116, on right: 80 113 115
array_list (92)
    on left: 117, on right: 85
dimension (93)
    on left: 118 119, on right: 117 118
scalar_type (94)
    on left: 120 121 122 123 124, on right: 11 12 15 16 19 20 21 22
    23 36
sign_literal_const (95)
    on left: 125 126, on right: 37 38 108 125
literal_const (96)
    on left: 127 128 129 130 131 132, on right: 126


State 0

    0 $accept: . program $end

    $default  reduce using rule 5 (decl_list)

    program    go to state 1
    decl_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: decl_list . funct_def decl_and_def_list
    2 decl_list: decl_list . var_decl
    3          | decl_list . const_decl
    4          | decl_list . funct_decl

    INT     shift, and go to state 4
    BOOL    shift, and go to state 5
    VOID    shift, and go to state 6
    FLOAT   shift, and go to state 7
    DOUBLE  shift, and go to state 8
    STRING  shift, and go to state 9
    CONST   shift, and go to state 10

    funct_def    go to state 11
    funct_decl   go to state 12
    var_decl     go to state 13
    const_decl   go to state 14
    scalar_type  go to state 15


State 3

    0 $accept: program $end .

    $default  accept


State 4

  120 scalar_type: INT .

    $default  reduce using rule 120 (scalar_type)


State 5

  123 scalar_type: BOOL .

    $default  reduce using rule 123 (scalar_type)


State 6

   13 funct_def: VOID . ID L_PAREN R_PAREN compound_statement
   14          | VOID . ID L_PAREN parameter_list R_PAREN compound_statement
   17 funct_decl: VOID . ID L_PAREN R_PAREN SEMICOLON
   18           | VOID . ID L_PAREN parameter_list R_PAREN SEMICOLON

    ID  shift, and go to state 16


State 7

  124 scalar_type: FLOAT .

    $default  reduce using rule 124 (scalar_type)


State 8

  121 scalar_type: DOUBLE .

    $default  reduce using rule 121 (scalar_type)


State 9

  122 scalar_type: STRING .

    $default  reduce using rule 122 (scalar_type)


State 10

   36 const_decl: CONST . scalar_type const_list SEMICOLON

    INT     shift, and go to state 4
    BOOL    shift, and go to state 5
    FLOAT   shift, and go to state 7
    DOUBLE  shift, and go to state 8
    STRING  shift, and go to state 9

    scalar_type  go to state 17


State 11

    1 program: decl_list funct_def . decl_and_def_list

    $default  reduce using rule 10 (decl_and_def_list)

    decl_and_def_list  go to state 18


State 12

    4 decl_list: decl_list funct_decl .

    $default  reduce using rule 4 (decl_list)


State 13

    2 decl_list: decl_list var_decl .

    $default  reduce using rule 2 (decl_list)


State 14

    3 decl_list: decl_list const_decl .

    $default  reduce using rule 3 (decl_list)


State 15

   11 funct_def: scalar_type . ID L_PAREN R_PAREN compound_statement
   12          | scalar_type . ID L_PAREN parameter_list R_PAREN compound_statement
   15 funct_decl: scalar_type . ID L_PAREN R_PAREN SEMICOLON
   16           | scalar_type . ID L_PAREN parameter_list R_PAREN SEMICOLON
   23 var_decl: scalar_type . identifier_list SEMICOLON

    ID  shift, and go to state 19

    identifier_list  go to state 20
    array_decl       go to state 21


State 16

   13 funct_def: VOID ID . L_PAREN R_PAREN compound_statement
   14          | VOID ID . L_PAREN parameter_list R_PAREN compound_statement
   17 funct_decl: VOID ID . L_PAREN R_PAREN SEMICOLON
   18           | VOID ID . L_PAREN parameter_list R_PAREN SEMICOLON

    L_PAREN  shift, and go to state 22


State 17

   36 const_decl: CONST scalar_type . const_list SEMICOLON

    ID  shift, and go to state 23

    const_list  go to state 24


State 18

    1 program: decl_list funct_def decl_and_def_list .
    6 decl_and_def_list: decl_and_def_list . var_decl
    7                  | decl_and_def_list . const_decl
    8                  | decl_and_def_list . funct_decl
    9                  | decl_and_def_list . funct_def

    INT     shift, and go to state 4
    BOOL    shift, and go to state 5
    VOID    shift, and go to state 6
    FLOAT   shift, and go to state 7
    DOUBLE  shift, and go to state 8
    STRING  shift, and go to state 9
    CONST   shift, and go to state 10

    $default  reduce using rule 1 (program)

    funct_def    go to state 25
    funct_decl   go to state 26
    var_decl     go to state 27
    const_decl   go to state 28
    scalar_type  go to state 15


State 19

   11 funct_def: scalar_type ID . L_PAREN R_PAREN compound_statement
   12          | scalar_type ID . L_PAREN parameter_list R_PAREN compound_statement
   15 funct_decl: scalar_type ID . L_PAREN R_PAREN SEMICOLON
   16           | scalar_type ID . L_PAREN parameter_list R_PAREN SEMICOLON
   30 identifier_list: ID . ASSIGN_OP logical_expression
   31                | ID .
   39 array_decl: ID . dim

    L_PAREN    shift, and go to state 29
    ML_BRACE   shift, and go to state 30
    ASSIGN_OP  shift, and go to state 31

    $default  reduce using rule 31 (identifier_list)

    dim  go to state 32


State 20

   23 var_decl: scalar_type identifier_list . SEMICOLON
   24 identifier_list: identifier_list . COMMA ID
   25                | identifier_list . COMMA ID ASSIGN_OP logical_expression
   26                | identifier_list . COMMA array_decl ASSIGN_OP initial_array
   27                | identifier_list . COMMA array_decl

    COMMA      shift, and go to state 33
    SEMICOLON  shift, and go to state 34


State 21

   28 identifier_list: array_decl . ASSIGN_OP initial_array
   29                | array_decl .

    ASSIGN_OP  shift, and go to state 35

    $default  reduce using rule 29 (identifier_list)


State 22

   13 funct_def: VOID ID L_PAREN . R_PAREN compound_statement
   14          | VOID ID L_PAREN . parameter_list R_PAREN compound_statement
   17 funct_decl: VOID ID L_PAREN . R_PAREN SEMICOLON
   18           | VOID ID L_PAREN . parameter_list R_PAREN SEMICOLON

    INT      shift, and go to state 4
    BOOL     shift, and go to state 5
    FLOAT    shift, and go to state 7
    DOUBLE   shift, and go to state 8
    STRING   shift, and go to state 9
    R_PAREN  shift, and go to state 36

    parameter_list  go to state 37
    scalar_type     go to state 38


State 23

   38 const_list: ID . ASSIGN_OP sign_literal_const

    ASSIGN_OP  shift, and go to state 39


State 24

   36 const_decl: CONST scalar_type const_list . SEMICOLON
   37 const_list: const_list . COMMA ID ASSIGN_OP sign_literal_const

    COMMA      shift, and go to state 40
    SEMICOLON  shift, and go to state 41


State 25

    9 decl_and_def_list: decl_and_def_list funct_def .

    $default  reduce using rule 9 (decl_and_def_list)


State 26

    8 decl_and_def_list: decl_and_def_list funct_decl .

    $default  reduce using rule 8 (decl_and_def_list)


State 27

    6 decl_and_def_list: decl_and_def_list var_decl .

    $default  reduce using rule 6 (decl_and_def_list)


State 28

    7 decl_and_def_list: decl_and_def_list const_decl .

    $default  reduce using rule 7 (decl_and_def_list)


State 29

   11 funct_def: scalar_type ID L_PAREN . R_PAREN compound_statement
   12          | scalar_type ID L_PAREN . parameter_list R_PAREN compound_statement
   15 funct_decl: scalar_type ID L_PAREN . R_PAREN SEMICOLON
   16           | scalar_type ID L_PAREN . parameter_list R_PAREN SEMICOLON

    INT      shift, and go to state 4
    BOOL     shift, and go to state 5
    FLOAT    shift, and go to state 7
    DOUBLE   shift, and go to state 8
    STRING   shift, and go to state 9
    R_PAREN  shift, and go to state 42

    parameter_list  go to state 43
    scalar_type     go to state 38


State 30

   41 dim: ML_BRACE . INT_CONST MR_BRACE

    INT_CONST  shift, and go to state 44


State 31

   30 identifier_list: ID ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 56
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 32

   39 array_decl: ID dim .
   40 dim: dim . ML_BRACE INT_CONST MR_BRACE

    ML_BRACE  shift, and go to state 67

    $default  reduce using rule 39 (array_decl)


State 33

   24 identifier_list: identifier_list COMMA . ID
   25                | identifier_list COMMA . ID ASSIGN_OP logical_expression
   26                | identifier_list COMMA . array_decl ASSIGN_OP initial_array
   27                | identifier_list COMMA . array_decl

    ID  shift, and go to state 68

    array_decl  go to state 69


State 34

   23 var_decl: scalar_type identifier_list SEMICOLON .

    $default  reduce using rule 23 (var_decl)


State 35

   28 identifier_list: array_decl ASSIGN_OP . initial_array

    L_BRACE  shift, and go to state 70

    initial_array  go to state 71


State 36

   13 funct_def: VOID ID L_PAREN R_PAREN . compound_statement
   17 funct_decl: VOID ID L_PAREN R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 72
    L_BRACE    shift, and go to state 73

    compound_statement  go to state 74


State 37

   14 funct_def: VOID ID L_PAREN parameter_list . R_PAREN compound_statement
   18 funct_decl: VOID ID L_PAREN parameter_list . R_PAREN SEMICOLON
   19 parameter_list: parameter_list . COMMA scalar_type ID
   20               | parameter_list . COMMA scalar_type array_decl

    R_PAREN  shift, and go to state 75
    COMMA    shift, and go to state 76


State 38

   21 parameter_list: scalar_type . array_decl
   22               | scalar_type . ID

    ID  shift, and go to state 77

    array_decl  go to state 78


State 39

   38 const_list: ID ASSIGN_OP . sign_literal_const

    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    SUB_OP       shift, and go to state 79

    sign_literal_const  go to state 80
    literal_const       go to state 66


State 40

   37 const_list: const_list COMMA . ID ASSIGN_OP sign_literal_const

    ID  shift, and go to state 81


State 41

   36 const_decl: CONST scalar_type const_list SEMICOLON .

    $default  reduce using rule 36 (const_decl)


State 42

   11 funct_def: scalar_type ID L_PAREN R_PAREN . compound_statement
   15 funct_decl: scalar_type ID L_PAREN R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 82
    L_BRACE    shift, and go to state 73

    compound_statement  go to state 83


State 43

   12 funct_def: scalar_type ID L_PAREN parameter_list . R_PAREN compound_statement
   16 funct_decl: scalar_type ID L_PAREN parameter_list . R_PAREN SEMICOLON
   19 parameter_list: parameter_list . COMMA scalar_type ID
   20               | parameter_list . COMMA scalar_type array_decl

    R_PAREN  shift, and go to state 84
    COMMA    shift, and go to state 76


State 44

   41 dim: ML_BRACE INT_CONST . MR_BRACE

    MR_BRACE  shift, and go to state 85


State 45

   86 variable_reference: ID .
  113 element: ID . L_PAREN logical_expression_list R_PAREN
  114        | ID . L_PAREN R_PAREN
  117 array_list: ID . dimension

    L_PAREN   shift, and go to state 86
    ML_BRACE  shift, and go to state 87

    $default  reduce using rule 86 (variable_reference)

    dimension  go to state 88


State 46

  127 literal_const: INT_CONST .

    $default  reduce using rule 127 (literal_const)


State 47

  128 literal_const: FLOAT_CONST .

    $default  reduce using rule 128 (literal_const)


State 48

  129 literal_const: SCIENTIFIC .

    $default  reduce using rule 129 (literal_const)


State 49

  130 literal_const: STR_CONST .

    $default  reduce using rule 130 (literal_const)


State 50

  131 literal_const: TRUE .

    $default  reduce using rule 131 (literal_const)


State 51

  132 literal_const: FALSE .

    $default  reduce using rule 132 (literal_const)


State 52

  112 element: L_PAREN . logical_expression R_PAREN

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 89
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 53

  110 element: SUB_OP . element
  125 sign_literal_const: SUB_OP . sign_literal_const

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference  go to state 55
    element             go to state 90
    array_list          go to state 64
    sign_literal_const  go to state 91
    literal_const       go to state 66


State 54

   91 logical_factor: NOT_OP . logical_factor

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_factor         go to state 92
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 55

  111 element: variable_reference .

    $default  reduce using rule 111 (element)


State 56

   30 identifier_list: ID ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 30 (identifier_list)


State 57

   88 logical_expression: logical_term .
   89 logical_term: logical_term . AND_OP logical_factor

    AND_OP  shift, and go to state 94

    $default  reduce using rule 88 (logical_expression)


State 58

   90 logical_term: logical_factor .

    $default  reduce using rule 90 (logical_term)


State 59

   92 logical_factor: relation_expression .
   93 relation_expression: relation_expression . relation_operator arithmetic_expression

    LE_OP  shift, and go to state 95
    NE_OP  shift, and go to state 96
    GE_OP  shift, and go to state 97
    EQ_OP  shift, and go to state 98
    LT_OP  shift, and go to state 99
    GT_OP  shift, and go to state 100

    $default  reduce using rule 92 (logical_factor)

    relation_operator  go to state 101


State 60

   94 relation_expression: arithmetic_expression .
  101 arithmetic_expression: arithmetic_expression . ADD_OP term
  102                      | arithmetic_expression . SUB_OP term

    ADD_OP  shift, and go to state 102
    SUB_OP  shift, and go to state 103

    $default  reduce using rule 94 (relation_expression)


State 61

  103 arithmetic_expression: term .
  104 term: term . MUL_OP factor
  105     | term . DIV_OP factor
  106     | term . MOD_OP factor

    MUL_OP  shift, and go to state 104
    DIV_OP  shift, and go to state 105
    MOD_OP  shift, and go to state 106

    $default  reduce using rule 103 (arithmetic_expression)


State 62

  107 term: factor .

    $default  reduce using rule 107 (term)


State 63

  109 factor: element .

    $default  reduce using rule 109 (factor)


State 64

   85 variable_reference: array_list .

    $default  reduce using rule 85 (variable_reference)


State 65

  108 factor: sign_literal_const .

    $default  reduce using rule 108 (factor)


State 66

  126 sign_literal_const: literal_const .

    $default  reduce using rule 126 (sign_literal_const)


State 67

   40 dim: dim ML_BRACE . INT_CONST MR_BRACE

    INT_CONST  shift, and go to state 107


State 68

   24 identifier_list: identifier_list COMMA ID .
   25                | identifier_list COMMA ID . ASSIGN_OP logical_expression
   39 array_decl: ID . dim

    ML_BRACE   shift, and go to state 30
    ASSIGN_OP  shift, and go to state 108

    $default  reduce using rule 24 (identifier_list)

    dim  go to state 32


State 69

   26 identifier_list: identifier_list COMMA array_decl . ASSIGN_OP initial_array
   27                | identifier_list COMMA array_decl .

    ASSIGN_OP  shift, and go to state 109

    $default  reduce using rule 27 (identifier_list)


State 70

   32 initial_array: L_BRACE . literal_list R_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    $default  reduce using rule 35 (literal_list)

    literal_list           go to state 110
    variable_reference     go to state 55
    logical_expression     go to state 111
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 71

   28 identifier_list: array_decl ASSIGN_OP initial_array .

    $default  reduce using rule 28 (identifier_list)


State 72

   17 funct_decl: VOID ID L_PAREN R_PAREN SEMICOLON .

    $default  reduce using rule 17 (funct_decl)


State 73

   42 compound_statement: L_BRACE . var_const_stmt_list R_BRACE

    $default  reduce using rule 46 (var_const_stmt_list)

    var_const_stmt_list  go to state 112


State 74

   13 funct_def: VOID ID L_PAREN R_PAREN compound_statement .

    $default  reduce using rule 13 (funct_def)


State 75

   14 funct_def: VOID ID L_PAREN parameter_list R_PAREN . compound_statement
   18 funct_decl: VOID ID L_PAREN parameter_list R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 113
    L_BRACE    shift, and go to state 73

    compound_statement  go to state 114


State 76

   19 parameter_list: parameter_list COMMA . scalar_type ID
   20               | parameter_list COMMA . scalar_type array_decl

    INT     shift, and go to state 4
    BOOL    shift, and go to state 5
    FLOAT   shift, and go to state 7
    DOUBLE  shift, and go to state 8
    STRING  shift, and go to state 9

    scalar_type  go to state 115


State 77

   22 parameter_list: scalar_type ID .
   39 array_decl: ID . dim

    ML_BRACE  shift, and go to state 30

    $default  reduce using rule 22 (parameter_list)

    dim  go to state 32


State 78

   21 parameter_list: scalar_type array_decl .

    $default  reduce using rule 21 (parameter_list)


State 79

  125 sign_literal_const: SUB_OP . sign_literal_const

    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    SUB_OP       shift, and go to state 79

    sign_literal_const  go to state 91
    literal_const       go to state 66


State 80

   38 const_list: ID ASSIGN_OP sign_literal_const .

    $default  reduce using rule 38 (const_list)


State 81

   37 const_list: const_list COMMA ID . ASSIGN_OP sign_literal_const

    ASSIGN_OP  shift, and go to state 116


State 82

   15 funct_decl: scalar_type ID L_PAREN R_PAREN SEMICOLON .

    $default  reduce using rule 15 (funct_decl)


State 83

   11 funct_def: scalar_type ID L_PAREN R_PAREN compound_statement .

    $default  reduce using rule 11 (funct_def)


State 84

   12 funct_def: scalar_type ID L_PAREN parameter_list R_PAREN . compound_statement
   16 funct_decl: scalar_type ID L_PAREN parameter_list R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 117
    L_BRACE    shift, and go to state 73

    compound_statement  go to state 118


State 85

   41 dim: ML_BRACE INT_CONST MR_BRACE .

    $default  reduce using rule 41 (dim)


State 86

  113 element: ID L_PAREN . logical_expression_list R_PAREN
  114        | ID L_PAREN . R_PAREN

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    R_PAREN      shift, and go to state 119
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference       go to state 55
    logical_expression       go to state 120
    logical_term             go to state 57
    logical_factor           go to state 58
    relation_expression      go to state 59
    arithmetic_expression    go to state 60
    term                     go to state 61
    factor                   go to state 62
    element                  go to state 63
    logical_expression_list  go to state 121
    array_list               go to state 64
    sign_literal_const       go to state 65
    literal_const            go to state 66


State 87

  119 dimension: ML_BRACE . logical_expression MR_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 122
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 88

  117 array_list: ID dimension .
  118 dimension: dimension . ML_BRACE logical_expression MR_BRACE

    ML_BRACE  shift, and go to state 123

    $default  reduce using rule 117 (array_list)


State 89

   87 logical_expression: logical_expression . OR_OP logical_term
  112 element: L_PAREN logical_expression . R_PAREN

    OR_OP    shift, and go to state 93
    R_PAREN  shift, and go to state 124


State 90

  110 element: SUB_OP element .

    $default  reduce using rule 110 (element)


State 91

  125 sign_literal_const: SUB_OP sign_literal_const .

    $default  reduce using rule 125 (sign_literal_const)


State 92

   91 logical_factor: NOT_OP logical_factor .

    $default  reduce using rule 91 (logical_factor)


State 93

   87 logical_expression: logical_expression OR_OP . logical_term

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_term           go to state 125
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 94

   89 logical_term: logical_term AND_OP . logical_factor

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_factor         go to state 126
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 95

   96 relation_operator: LE_OP .

    $default  reduce using rule 96 (relation_operator)


State 96

  100 relation_operator: NE_OP .

    $default  reduce using rule 100 (relation_operator)


State 97

   98 relation_operator: GE_OP .

    $default  reduce using rule 98 (relation_operator)


State 98

   97 relation_operator: EQ_OP .

    $default  reduce using rule 97 (relation_operator)


State 99

   95 relation_operator: LT_OP .

    $default  reduce using rule 95 (relation_operator)


State 100

   99 relation_operator: GT_OP .

    $default  reduce using rule 99 (relation_operator)


State 101

   93 relation_expression: relation_expression relation_operator . arithmetic_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference     go to state 55
    arithmetic_expression  go to state 127
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 102

  101 arithmetic_expression: arithmetic_expression ADD_OP . term

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference  go to state 55
    term                go to state 128
    factor              go to state 62
    element             go to state 63
    array_list          go to state 64
    sign_literal_const  go to state 65
    literal_const       go to state 66


State 103

  102 arithmetic_expression: arithmetic_expression SUB_OP . term

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference  go to state 55
    term                go to state 129
    factor              go to state 62
    element             go to state 63
    array_list          go to state 64
    sign_literal_const  go to state 65
    literal_const       go to state 66


State 104

  104 term: term MUL_OP . factor

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference  go to state 55
    factor              go to state 130
    element             go to state 63
    array_list          go to state 64
    sign_literal_const  go to state 65
    literal_const       go to state 66


State 105

  105 term: term DIV_OP . factor

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference  go to state 55
    factor              go to state 131
    element             go to state 63
    array_list          go to state 64
    sign_literal_const  go to state 65
    literal_const       go to state 66


State 106

  106 term: term MOD_OP . factor

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53

    variable_reference  go to state 55
    factor              go to state 132
    element             go to state 63
    array_list          go to state 64
    sign_literal_const  go to state 65
    literal_const       go to state 66


State 107

   40 dim: dim ML_BRACE INT_CONST . MR_BRACE

    MR_BRACE  shift, and go to state 133


State 108

   25 identifier_list: identifier_list COMMA ID ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 134
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 109

   26 identifier_list: identifier_list COMMA array_decl ASSIGN_OP . initial_array

    L_BRACE  shift, and go to state 70

    initial_array  go to state 135


State 110

   32 initial_array: L_BRACE literal_list . R_BRACE
   33 literal_list: literal_list . COMMA logical_expression

    COMMA    shift, and go to state 136
    R_BRACE  shift, and go to state 137


State 111

   34 literal_list: logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 34 (literal_list)


State 112

   42 compound_statement: L_BRACE var_const_stmt_list . R_BRACE
   43 var_const_stmt_list: var_const_stmt_list . statement
   44                    | var_const_stmt_list . var_decl
   45                    | var_const_stmt_list . const_decl

    ID        shift, and go to state 138
    READ      shift, and go to state 139
    WHILE     shift, and go to state 140
    DO        shift, and go to state 141
    IF        shift, and go to state 142
    FOR       shift, and go to state 143
    INT       shift, and go to state 4
    PRINT     shift, and go to state 144
    BOOL      shift, and go to state 5
    FLOAT     shift, and go to state 7
    DOUBLE    shift, and go to state 8
    STRING    shift, and go to state 9
    CONTINUE  shift, and go to state 145
    BREAK     shift, and go to state 146
    RETURN    shift, and go to state 147
    CONST     shift, and go to state 10
    L_BRACE   shift, and go to state 73
    R_BRACE   shift, and go to state 148

    var_decl                   go to state 149
    const_decl                 go to state 150
    compound_statement         go to state 151
    statement                  go to state 152
    simple_statement           go to state 153
    conditional_statement      go to state 154
    while_statement            go to state 155
    for_statement              go to state 156
    function_invoke_statement  go to state 157
    jump_statement             go to state 158
    variable_reference         go to state 159
    array_list                 go to state 64
    scalar_type                go to state 160


State 113

   18 funct_decl: VOID ID L_PAREN parameter_list R_PAREN SEMICOLON .

    $default  reduce using rule 18 (funct_decl)


State 114

   14 funct_def: VOID ID L_PAREN parameter_list R_PAREN compound_statement .

    $default  reduce using rule 14 (funct_def)


State 115

   19 parameter_list: parameter_list COMMA scalar_type . ID
   20               | parameter_list COMMA scalar_type . array_decl

    ID  shift, and go to state 161

    array_decl  go to state 162


State 116

   37 const_list: const_list COMMA ID ASSIGN_OP . sign_literal_const

    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    SUB_OP       shift, and go to state 79

    sign_literal_const  go to state 163
    literal_const       go to state 66


State 117

   16 funct_decl: scalar_type ID L_PAREN parameter_list R_PAREN SEMICOLON .

    $default  reduce using rule 16 (funct_decl)


State 118

   12 funct_def: scalar_type ID L_PAREN parameter_list R_PAREN compound_statement .

    $default  reduce using rule 12 (funct_def)


State 119

  114 element: ID L_PAREN R_PAREN .

    $default  reduce using rule 114 (element)


State 120

   87 logical_expression: logical_expression . OR_OP logical_term
  116 logical_expression_list: logical_expression .

    OR_OP  shift, and go to state 93

    $default  reduce using rule 116 (logical_expression_list)


State 121

  113 element: ID L_PAREN logical_expression_list . R_PAREN
  115 logical_expression_list: logical_expression_list . COMMA logical_expression

    R_PAREN  shift, and go to state 164
    COMMA    shift, and go to state 165


State 122

   87 logical_expression: logical_expression . OR_OP logical_term
  119 dimension: ML_BRACE logical_expression . MR_BRACE

    OR_OP     shift, and go to state 93
    MR_BRACE  shift, and go to state 166


State 123

  118 dimension: dimension ML_BRACE . logical_expression MR_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 167
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 124

  112 element: L_PAREN logical_expression R_PAREN .

    $default  reduce using rule 112 (element)


State 125

   87 logical_expression: logical_expression OR_OP logical_term .
   89 logical_term: logical_term . AND_OP logical_factor

    AND_OP  shift, and go to state 94

    $default  reduce using rule 87 (logical_expression)


State 126

   89 logical_term: logical_term AND_OP logical_factor .

    $default  reduce using rule 89 (logical_term)


State 127

   93 relation_expression: relation_expression relation_operator arithmetic_expression .
  101 arithmetic_expression: arithmetic_expression . ADD_OP term
  102                      | arithmetic_expression . SUB_OP term

    ADD_OP  shift, and go to state 102
    SUB_OP  shift, and go to state 103

    $default  reduce using rule 93 (relation_expression)


State 128

  101 arithmetic_expression: arithmetic_expression ADD_OP term .
  104 term: term . MUL_OP factor
  105     | term . DIV_OP factor
  106     | term . MOD_OP factor

    MUL_OP  shift, and go to state 104
    DIV_OP  shift, and go to state 105
    MOD_OP  shift, and go to state 106

    $default  reduce using rule 101 (arithmetic_expression)


State 129

  102 arithmetic_expression: arithmetic_expression SUB_OP term .
  104 term: term . MUL_OP factor
  105     | term . DIV_OP factor
  106     | term . MOD_OP factor

    MUL_OP  shift, and go to state 104
    DIV_OP  shift, and go to state 105
    MOD_OP  shift, and go to state 106

    $default  reduce using rule 102 (arithmetic_expression)


State 130

  104 term: term MUL_OP factor .

    $default  reduce using rule 104 (term)


State 131

  105 term: term DIV_OP factor .

    $default  reduce using rule 105 (term)


State 132

  106 term: term MOD_OP factor .

    $default  reduce using rule 106 (term)


State 133

   40 dim: dim ML_BRACE INT_CONST MR_BRACE .

    $default  reduce using rule 40 (dim)


State 134

   25 identifier_list: identifier_list COMMA ID ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 25 (identifier_list)


State 135

   26 identifier_list: identifier_list COMMA array_decl ASSIGN_OP initial_array .

    $default  reduce using rule 26 (identifier_list)


State 136

   33 literal_list: literal_list COMMA . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 168
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 137

   32 initial_array: L_BRACE literal_list R_BRACE .

    $default  reduce using rule 32 (initial_array)


State 138

   80 function_invoke_statement: ID . L_PAREN logical_expression_list R_PAREN SEMICOLON
   81                          | ID . L_PAREN R_PAREN SEMICOLON
   86 variable_reference: ID .
  117 array_list: ID . dimension

    L_PAREN   shift, and go to state 169
    ML_BRACE  shift, and go to state 87

    $default  reduce using rule 86 (variable_reference)

    dimension  go to state 88


State 139

   56 simple_statement: READ . variable_reference SEMICOLON

    ID  shift, and go to state 170

    variable_reference  go to state 171
    array_list          go to state 64


State 140

   59 while_statement: WHILE . L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE

    L_PAREN  shift, and go to state 172


State 141

   60 while_statement: DO . L_BRACE var_const_stmt_list R_BRACE WHILE L_PAREN logical_expression R_PAREN SEMICOLON

    L_BRACE  shift, and go to state 173


State 142

   57 conditional_statement: IF . L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE
   58                      | IF . L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE

    L_PAREN  shift, and go to state 174


State 143

   61 for_statement: FOR . L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

    L_PAREN  shift, and go to state 175


State 144

   55 simple_statement: PRINT . logical_expression SEMICOLON

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 176
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 145

   82 jump_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 177


State 146

   83 jump_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 178


State 147

   84 jump_statement: RETURN . logical_expression SEMICOLON

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 179
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 148

   42 compound_statement: L_BRACE var_const_stmt_list R_BRACE .

    $default  reduce using rule 42 (compound_statement)


State 149

   44 var_const_stmt_list: var_const_stmt_list var_decl .

    $default  reduce using rule 44 (var_const_stmt_list)


State 150

   45 var_const_stmt_list: var_const_stmt_list const_decl .

    $default  reduce using rule 45 (var_const_stmt_list)


State 151

   47 statement: compound_statement .

    $default  reduce using rule 47 (statement)


State 152

   43 var_const_stmt_list: var_const_stmt_list statement .

    $default  reduce using rule 43 (var_const_stmt_list)


State 153

   48 statement: simple_statement .

    $default  reduce using rule 48 (statement)


State 154

   49 statement: conditional_statement .

    $default  reduce using rule 49 (statement)


State 155

   50 statement: while_statement .

    $default  reduce using rule 50 (statement)


State 156

   51 statement: for_statement .

    $default  reduce using rule 51 (statement)


State 157

   52 statement: function_invoke_statement .

    $default  reduce using rule 52 (statement)


State 158

   53 statement: jump_statement .

    $default  reduce using rule 53 (statement)


State 159

   54 simple_statement: variable_reference . ASSIGN_OP logical_expression SEMICOLON

    ASSIGN_OP  shift, and go to state 180


State 160

   23 var_decl: scalar_type . identifier_list SEMICOLON

    ID  shift, and go to state 181

    identifier_list  go to state 20
    array_decl       go to state 21


State 161

   19 parameter_list: parameter_list COMMA scalar_type ID .
   39 array_decl: ID . dim

    ML_BRACE  shift, and go to state 30

    $default  reduce using rule 19 (parameter_list)

    dim  go to state 32


State 162

   20 parameter_list: parameter_list COMMA scalar_type array_decl .

    $default  reduce using rule 20 (parameter_list)


State 163

   37 const_list: const_list COMMA ID ASSIGN_OP sign_literal_const .

    $default  reduce using rule 37 (const_list)


State 164

  113 element: ID L_PAREN logical_expression_list R_PAREN .

    $default  reduce using rule 113 (element)


State 165

  115 logical_expression_list: logical_expression_list COMMA . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 182
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 166

  119 dimension: ML_BRACE logical_expression MR_BRACE .

    $default  reduce using rule 119 (dimension)


State 167

   87 logical_expression: logical_expression . OR_OP logical_term
  118 dimension: dimension ML_BRACE logical_expression . MR_BRACE

    OR_OP     shift, and go to state 93
    MR_BRACE  shift, and go to state 183


State 168

   33 literal_list: literal_list COMMA logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 33 (literal_list)


State 169

   80 function_invoke_statement: ID L_PAREN . logical_expression_list R_PAREN SEMICOLON
   81                          | ID L_PAREN . R_PAREN SEMICOLON

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    R_PAREN      shift, and go to state 184
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference       go to state 55
    logical_expression       go to state 120
    logical_term             go to state 57
    logical_factor           go to state 58
    relation_expression      go to state 59
    arithmetic_expression    go to state 60
    term                     go to state 61
    factor                   go to state 62
    element                  go to state 63
    logical_expression_list  go to state 185
    array_list               go to state 64
    sign_literal_const       go to state 65
    literal_const            go to state 66


State 170

   86 variable_reference: ID .
  117 array_list: ID . dimension

    ML_BRACE  shift, and go to state 87

    $default  reduce using rule 86 (variable_reference)

    dimension  go to state 88


State 171

   56 simple_statement: READ variable_reference . SEMICOLON

    SEMICOLON  shift, and go to state 186


State 172

   59 while_statement: WHILE L_PAREN . logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 187
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 173

   60 while_statement: DO L_BRACE . var_const_stmt_list R_BRACE WHILE L_PAREN logical_expression R_PAREN SEMICOLON

    $default  reduce using rule 46 (var_const_stmt_list)

    var_const_stmt_list  go to state 188


State 174

   57 conditional_statement: IF L_PAREN . logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE
   58                      | IF L_PAREN . logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 189
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 175

   61 for_statement: FOR L_PAREN . initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    $default  reduce using rule 63 (initial_expression_list)

    initial_expression_list  go to state 190
    initial_expression       go to state 191
    variable_reference       go to state 192
    logical_expression       go to state 193
    logical_term             go to state 57
    logical_factor           go to state 58
    relation_expression      go to state 59
    arithmetic_expression    go to state 60
    term                     go to state 61
    factor                   go to state 62
    element                  go to state 63
    array_list               go to state 64
    sign_literal_const       go to state 65
    literal_const            go to state 66


State 176

   55 simple_statement: PRINT logical_expression . SEMICOLON
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP      shift, and go to state 93
    SEMICOLON  shift, and go to state 194


State 177

   82 jump_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 82 (jump_statement)


State 178

   83 jump_statement: BREAK SEMICOLON .

    $default  reduce using rule 83 (jump_statement)


State 179

   84 jump_statement: RETURN logical_expression . SEMICOLON
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP      shift, and go to state 93
    SEMICOLON  shift, and go to state 195


State 180

   54 simple_statement: variable_reference ASSIGN_OP . logical_expression SEMICOLON

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 196
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 181

   30 identifier_list: ID . ASSIGN_OP logical_expression
   31                | ID .
   39 array_decl: ID . dim

    ML_BRACE   shift, and go to state 30
    ASSIGN_OP  shift, and go to state 31

    $default  reduce using rule 31 (identifier_list)

    dim  go to state 32


State 182

   87 logical_expression: logical_expression . OR_OP logical_term
  115 logical_expression_list: logical_expression_list COMMA logical_expression .

    OR_OP  shift, and go to state 93

    $default  reduce using rule 115 (logical_expression_list)


State 183

  118 dimension: dimension ML_BRACE logical_expression MR_BRACE .

    $default  reduce using rule 118 (dimension)


State 184

   81 function_invoke_statement: ID L_PAREN R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 197


State 185

   80 function_invoke_statement: ID L_PAREN logical_expression_list . R_PAREN SEMICOLON
  115 logical_expression_list: logical_expression_list . COMMA logical_expression

    R_PAREN  shift, and go to state 198
    COMMA    shift, and go to state 165


State 186

   56 simple_statement: READ variable_reference SEMICOLON .

    $default  reduce using rule 56 (simple_statement)


State 187

   59 while_statement: WHILE L_PAREN logical_expression . R_PAREN L_BRACE var_const_stmt_list R_BRACE
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP    shift, and go to state 93
    R_PAREN  shift, and go to state 199


State 188

   43 var_const_stmt_list: var_const_stmt_list . statement
   44                    | var_const_stmt_list . var_decl
   45                    | var_const_stmt_list . const_decl
   60 while_statement: DO L_BRACE var_const_stmt_list . R_BRACE WHILE L_PAREN logical_expression R_PAREN SEMICOLON

    ID        shift, and go to state 138
    READ      shift, and go to state 139
    WHILE     shift, and go to state 140
    DO        shift, and go to state 141
    IF        shift, and go to state 142
    FOR       shift, and go to state 143
    INT       shift, and go to state 4
    PRINT     shift, and go to state 144
    BOOL      shift, and go to state 5
    FLOAT     shift, and go to state 7
    DOUBLE    shift, and go to state 8
    STRING    shift, and go to state 9
    CONTINUE  shift, and go to state 145
    BREAK     shift, and go to state 146
    RETURN    shift, and go to state 147
    CONST     shift, and go to state 10
    L_BRACE   shift, and go to state 73
    R_BRACE   shift, and go to state 200

    var_decl                   go to state 149
    const_decl                 go to state 150
    compound_statement         go to state 151
    statement                  go to state 152
    simple_statement           go to state 153
    conditional_statement      go to state 154
    while_statement            go to state 155
    for_statement              go to state 156
    function_invoke_statement  go to state 157
    jump_statement             go to state 158
    variable_reference         go to state 159
    array_list                 go to state 64
    scalar_type                go to state 160


State 189

   57 conditional_statement: IF L_PAREN logical_expression . R_PAREN L_BRACE var_const_stmt_list R_BRACE
   58                      | IF L_PAREN logical_expression . R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP    shift, and go to state 93
    R_PAREN  shift, and go to state 201


State 190

   61 for_statement: FOR L_PAREN initial_expression_list . SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

    SEMICOLON  shift, and go to state 202


State 191

   62 initial_expression_list: initial_expression .
   64 initial_expression: initial_expression . COMMA variable_reference ASSIGN_OP logical_expression
   65                   | initial_expression . COMMA logical_expression

    COMMA  shift, and go to state 203

    $default  reduce using rule 62 (initial_expression_list)


State 192

   67 initial_expression: variable_reference . ASSIGN_OP logical_expression
  111 element: variable_reference .

    ASSIGN_OP  shift, and go to state 204

    $default  reduce using rule 111 (element)


State 193

   66 initial_expression: logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 66 (initial_expression)


State 194

   55 simple_statement: PRINT logical_expression SEMICOLON .

    $default  reduce using rule 55 (simple_statement)


State 195

   84 jump_statement: RETURN logical_expression SEMICOLON .

    $default  reduce using rule 84 (jump_statement)


State 196

   54 simple_statement: variable_reference ASSIGN_OP logical_expression . SEMICOLON
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP      shift, and go to state 93
    SEMICOLON  shift, and go to state 205


State 197

   81 function_invoke_statement: ID L_PAREN R_PAREN SEMICOLON .

    $default  reduce using rule 81 (function_invoke_statement)


State 198

   80 function_invoke_statement: ID L_PAREN logical_expression_list R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 206


State 199

   59 while_statement: WHILE L_PAREN logical_expression R_PAREN . L_BRACE var_const_stmt_list R_BRACE

    L_BRACE  shift, and go to state 207


State 200

   60 while_statement: DO L_BRACE var_const_stmt_list R_BRACE . WHILE L_PAREN logical_expression R_PAREN SEMICOLON

    WHILE  shift, and go to state 208


State 201

   57 conditional_statement: IF L_PAREN logical_expression R_PAREN . L_BRACE var_const_stmt_list R_BRACE
   58                      | IF L_PAREN logical_expression R_PAREN . L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE

    L_BRACE  shift, and go to state 209


State 202

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON . control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    $default  reduce using rule 69 (control_expression_list)

    control_expression_list  go to state 210
    control_expression       go to state 211
    variable_reference       go to state 212
    logical_expression       go to state 213
    logical_term             go to state 57
    logical_factor           go to state 58
    relation_expression      go to state 59
    arithmetic_expression    go to state 60
    term                     go to state 61
    factor                   go to state 62
    element                  go to state 63
    array_list               go to state 64
    sign_literal_const       go to state 65
    literal_const            go to state 66


State 203

   64 initial_expression: initial_expression COMMA . variable_reference ASSIGN_OP logical_expression
   65                   | initial_expression COMMA . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 214
    logical_expression     go to state 215
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 204

   67 initial_expression: variable_reference ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 216
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 205

   54 simple_statement: variable_reference ASSIGN_OP logical_expression SEMICOLON .

    $default  reduce using rule 54 (simple_statement)


State 206

   80 function_invoke_statement: ID L_PAREN logical_expression_list R_PAREN SEMICOLON .

    $default  reduce using rule 80 (function_invoke_statement)


State 207

   59 while_statement: WHILE L_PAREN logical_expression R_PAREN L_BRACE . var_const_stmt_list R_BRACE

    $default  reduce using rule 46 (var_const_stmt_list)

    var_const_stmt_list  go to state 217


State 208

   60 while_statement: DO L_BRACE var_const_stmt_list R_BRACE WHILE . L_PAREN logical_expression R_PAREN SEMICOLON

    L_PAREN  shift, and go to state 218


State 209

   57 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE . var_const_stmt_list R_BRACE
   58                      | IF L_PAREN logical_expression R_PAREN L_BRACE . var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE

    $default  reduce using rule 46 (var_const_stmt_list)

    var_const_stmt_list  go to state 219


State 210

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list . SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

    SEMICOLON  shift, and go to state 220


State 211

   68 control_expression_list: control_expression .
   70 control_expression: control_expression . COMMA variable_reference ASSIGN_OP logical_expression
   71                   | control_expression . COMMA logical_expression

    COMMA  shift, and go to state 221

    $default  reduce using rule 68 (control_expression_list)


State 212

   73 control_expression: variable_reference . ASSIGN_OP logical_expression
  111 element: variable_reference .

    ASSIGN_OP  shift, and go to state 222

    $default  reduce using rule 111 (element)


State 213

   72 control_expression: logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 72 (control_expression)


State 214

   64 initial_expression: initial_expression COMMA variable_reference . ASSIGN_OP logical_expression
  111 element: variable_reference .

    ASSIGN_OP  shift, and go to state 223

    $default  reduce using rule 111 (element)


State 215

   65 initial_expression: initial_expression COMMA logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 65 (initial_expression)


State 216

   67 initial_expression: variable_reference ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 67 (initial_expression)


State 217

   43 var_const_stmt_list: var_const_stmt_list . statement
   44                    | var_const_stmt_list . var_decl
   45                    | var_const_stmt_list . const_decl
   59 while_statement: WHILE L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list . R_BRACE

    ID        shift, and go to state 138
    READ      shift, and go to state 139
    WHILE     shift, and go to state 140
    DO        shift, and go to state 141
    IF        shift, and go to state 142
    FOR       shift, and go to state 143
    INT       shift, and go to state 4
    PRINT     shift, and go to state 144
    BOOL      shift, and go to state 5
    FLOAT     shift, and go to state 7
    DOUBLE    shift, and go to state 8
    STRING    shift, and go to state 9
    CONTINUE  shift, and go to state 145
    BREAK     shift, and go to state 146
    RETURN    shift, and go to state 147
    CONST     shift, and go to state 10
    L_BRACE   shift, and go to state 73
    R_BRACE   shift, and go to state 224

    var_decl                   go to state 149
    const_decl                 go to state 150
    compound_statement         go to state 151
    statement                  go to state 152
    simple_statement           go to state 153
    conditional_statement      go to state 154
    while_statement            go to state 155
    for_statement              go to state 156
    function_invoke_statement  go to state 157
    jump_statement             go to state 158
    variable_reference         go to state 159
    array_list                 go to state 64
    scalar_type                go to state 160


State 218

   60 while_statement: DO L_BRACE var_const_stmt_list R_BRACE WHILE L_PAREN . logical_expression R_PAREN SEMICOLON

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 225
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 219

   43 var_const_stmt_list: var_const_stmt_list . statement
   44                    | var_const_stmt_list . var_decl
   45                    | var_const_stmt_list . const_decl
   57 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list . R_BRACE
   58                      | IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list . R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE

    ID        shift, and go to state 138
    READ      shift, and go to state 139
    WHILE     shift, and go to state 140
    DO        shift, and go to state 141
    IF        shift, and go to state 142
    FOR       shift, and go to state 143
    INT       shift, and go to state 4
    PRINT     shift, and go to state 144
    BOOL      shift, and go to state 5
    FLOAT     shift, and go to state 7
    DOUBLE    shift, and go to state 8
    STRING    shift, and go to state 9
    CONTINUE  shift, and go to state 145
    BREAK     shift, and go to state 146
    RETURN    shift, and go to state 147
    CONST     shift, and go to state 10
    L_BRACE   shift, and go to state 73
    R_BRACE   shift, and go to state 226

    var_decl                   go to state 149
    const_decl                 go to state 150
    compound_statement         go to state 151
    statement                  go to state 152
    simple_statement           go to state 153
    conditional_statement      go to state 154
    while_statement            go to state 155
    for_statement              go to state 156
    function_invoke_statement  go to state 157
    jump_statement             go to state 158
    variable_reference         go to state 159
    array_list                 go to state 64
    scalar_type                go to state 160


State 220

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON . increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    $default  reduce using rule 75 (increment_expression_list)

    increment_expression_list  go to state 227
    increment_expression       go to state 228
    variable_reference         go to state 229
    logical_expression         go to state 230
    logical_term               go to state 57
    logical_factor             go to state 58
    relation_expression        go to state 59
    arithmetic_expression      go to state 60
    term                       go to state 61
    factor                     go to state 62
    element                    go to state 63
    array_list                 go to state 64
    sign_literal_const         go to state 65
    literal_const              go to state 66


State 221

   70 control_expression: control_expression COMMA . variable_reference ASSIGN_OP logical_expression
   71                   | control_expression COMMA . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 231
    logical_expression     go to state 232
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 222

   73 control_expression: variable_reference ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 233
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 223

   64 initial_expression: initial_expression COMMA variable_reference ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 234
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 224

   59 while_statement: WHILE L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE .

    $default  reduce using rule 59 (while_statement)


State 225

   60 while_statement: DO L_BRACE var_const_stmt_list R_BRACE WHILE L_PAREN logical_expression . R_PAREN SEMICOLON
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP    shift, and go to state 93
    R_PAREN  shift, and go to state 235


State 226

   57 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE .
   58                      | IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE . ELSE L_BRACE var_const_stmt_list R_BRACE

    ELSE  shift, and go to state 236

    $default  reduce using rule 57 (conditional_statement)


State 227

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list . R_PAREN L_BRACE var_const_stmt_list R_BRACE

    R_PAREN  shift, and go to state 237


State 228

   74 increment_expression_list: increment_expression .
   76 increment_expression: increment_expression . COMMA variable_reference ASSIGN_OP logical_expression
   77                     | increment_expression . COMMA logical_expression

    COMMA  shift, and go to state 238

    $default  reduce using rule 74 (increment_expression_list)


State 229

   79 increment_expression: variable_reference . ASSIGN_OP logical_expression
  111 element: variable_reference .

    ASSIGN_OP  shift, and go to state 239

    $default  reduce using rule 111 (element)


State 230

   78 increment_expression: logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 78 (increment_expression)


State 231

   70 control_expression: control_expression COMMA variable_reference . ASSIGN_OP logical_expression
  111 element: variable_reference .

    ASSIGN_OP  shift, and go to state 240

    $default  reduce using rule 111 (element)


State 232

   71 control_expression: control_expression COMMA logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 71 (control_expression)


State 233

   73 control_expression: variable_reference ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 73 (control_expression)


State 234

   64 initial_expression: initial_expression COMMA variable_reference ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 64 (initial_expression)


State 235

   60 while_statement: DO L_BRACE var_const_stmt_list R_BRACE WHILE L_PAREN logical_expression R_PAREN . SEMICOLON

    SEMICOLON  shift, and go to state 241


State 236

   58 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE . L_BRACE var_const_stmt_list R_BRACE

    L_BRACE  shift, and go to state 242


State 237

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN . L_BRACE var_const_stmt_list R_BRACE

    L_BRACE  shift, and go to state 243


State 238

   76 increment_expression: increment_expression COMMA . variable_reference ASSIGN_OP logical_expression
   77                     | increment_expression COMMA . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 244
    logical_expression     go to state 245
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 239

   79 increment_expression: variable_reference ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 246
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 240

   70 control_expression: control_expression COMMA variable_reference ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 247
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 241

   60 while_statement: DO L_BRACE var_const_stmt_list R_BRACE WHILE L_PAREN logical_expression R_PAREN SEMICOLON .

    $default  reduce using rule 60 (while_statement)


State 242

   58 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE . var_const_stmt_list R_BRACE

    $default  reduce using rule 46 (var_const_stmt_list)

    var_const_stmt_list  go to state 248


State 243

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE . var_const_stmt_list R_BRACE

    $default  reduce using rule 46 (var_const_stmt_list)

    var_const_stmt_list  go to state 249


State 244

   76 increment_expression: increment_expression COMMA variable_reference . ASSIGN_OP logical_expression
  111 element: variable_reference .

    ASSIGN_OP  shift, and go to state 250

    $default  reduce using rule 111 (element)


State 245

   77 increment_expression: increment_expression COMMA logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 77 (increment_expression)


State 246

   79 increment_expression: variable_reference ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 79 (increment_expression)


State 247

   70 control_expression: control_expression COMMA variable_reference ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 70 (control_expression)


State 248

   43 var_const_stmt_list: var_const_stmt_list . statement
   44                    | var_const_stmt_list . var_decl
   45                    | var_const_stmt_list . const_decl
   58 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list . R_BRACE

    ID        shift, and go to state 138
    READ      shift, and go to state 139
    WHILE     shift, and go to state 140
    DO        shift, and go to state 141
    IF        shift, and go to state 142
    FOR       shift, and go to state 143
    INT       shift, and go to state 4
    PRINT     shift, and go to state 144
    BOOL      shift, and go to state 5
    FLOAT     shift, and go to state 7
    DOUBLE    shift, and go to state 8
    STRING    shift, and go to state 9
    CONTINUE  shift, and go to state 145
    BREAK     shift, and go to state 146
    RETURN    shift, and go to state 147
    CONST     shift, and go to state 10
    L_BRACE   shift, and go to state 73
    R_BRACE   shift, and go to state 251

    var_decl                   go to state 149
    const_decl                 go to state 150
    compound_statement         go to state 151
    statement                  go to state 152
    simple_statement           go to state 153
    conditional_statement      go to state 154
    while_statement            go to state 155
    for_statement              go to state 156
    function_invoke_statement  go to state 157
    jump_statement             go to state 158
    variable_reference         go to state 159
    array_list                 go to state 64
    scalar_type                go to state 160


State 249

   43 var_const_stmt_list: var_const_stmt_list . statement
   44                    | var_const_stmt_list . var_decl
   45                    | var_const_stmt_list . const_decl
   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list . R_BRACE

    ID        shift, and go to state 138
    READ      shift, and go to state 139
    WHILE     shift, and go to state 140
    DO        shift, and go to state 141
    IF        shift, and go to state 142
    FOR       shift, and go to state 143
    INT       shift, and go to state 4
    PRINT     shift, and go to state 144
    BOOL      shift, and go to state 5
    FLOAT     shift, and go to state 7
    DOUBLE    shift, and go to state 8
    STRING    shift, and go to state 9
    CONTINUE  shift, and go to state 145
    BREAK     shift, and go to state 146
    RETURN    shift, and go to state 147
    CONST     shift, and go to state 10
    L_BRACE   shift, and go to state 73
    R_BRACE   shift, and go to state 252

    var_decl                   go to state 149
    const_decl                 go to state 150
    compound_statement         go to state 151
    statement                  go to state 152
    simple_statement           go to state 153
    conditional_statement      go to state 154
    while_statement            go to state 155
    for_statement              go to state 156
    function_invoke_statement  go to state 157
    jump_statement             go to state 158
    variable_reference         go to state 159
    array_list                 go to state 64
    scalar_type                go to state 160


State 250

   76 increment_expression: increment_expression COMMA variable_reference ASSIGN_OP . logical_expression

    ID           shift, and go to state 45
    INT_CONST    shift, and go to state 46
    FLOAT_CONST  shift, and go to state 47
    SCIENTIFIC   shift, and go to state 48
    STR_CONST    shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    L_PAREN      shift, and go to state 52
    SUB_OP       shift, and go to state 53
    NOT_OP       shift, and go to state 54

    variable_reference     go to state 55
    logical_expression     go to state 253
    logical_term           go to state 57
    logical_factor         go to state 58
    relation_expression    go to state 59
    arithmetic_expression  go to state 60
    term                   go to state 61
    factor                 go to state 62
    element                go to state 63
    array_list             go to state 64
    sign_literal_const     go to state 65
    literal_const          go to state 66


State 251

   58 conditional_statement: IF L_PAREN logical_expression R_PAREN L_BRACE var_const_stmt_list R_BRACE ELSE L_BRACE var_const_stmt_list R_BRACE .

    $default  reduce using rule 58 (conditional_statement)


State 252

   61 for_statement: FOR L_PAREN initial_expression_list SEMICOLON control_expression_list SEMICOLON increment_expression_list R_PAREN L_BRACE var_const_stmt_list R_BRACE .

    $default  reduce using rule 61 (for_statement)


State 253

   76 increment_expression: increment_expression COMMA variable_reference ASSIGN_OP logical_expression .
   87 logical_expression: logical_expression . OR_OP logical_term

    OR_OP  shift, and go to state 93

    $default  reduce using rule 76 (increment_expression)
