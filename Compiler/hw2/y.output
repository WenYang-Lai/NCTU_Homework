Grammar

    0 $accept: program $end

    1 program: decl_and_def_list

    2 decl_and_def_list: def_list
    3                  | declaration decl_and_def_list

    4 accept_decl_and_def_list: def_list
    5                         | declaration accept_decl_and_def_list
    6                         | %empty

    7 def_list: definition accept_decl_and_def_list

    8 declaration: const_decl
    9            | var_decl
   10            | func_decl

   11 definition: type identifier '(' argument_list ')' '{' compound '}'

   12 compound: compound declaration
   13         | compound statement
   14         | %empty

   15 statement: variable_reference '=' expr ';'
   16          | PRINT print_argu ';'
   17          | READ variable_reference ';'
   18          | IF '(' expr ')' '{' compound '}' orelse
   19          | WHILE '(' expr ')' '{' compound '}'
   20          | DO '{' compound '}' WHILE '(' expr ')' ';'
   21          | FOR '(' assign_expr ';' assign_expr ';' assign_expr ')' '{' compound '}'
   22          | RETURN expr ';'
   23          | BREAK ';'
   24          | CONTINUE ';'
   25          | function_call ';'

   26 function_call: identifier '(' expr_list ')'

   27 orelse: ELSE '{' compound '}'
   28       | %empty

   29 print_argu: expr

   30 argument_list: non_empty_argu_list
   31              | %empty

   32 expr_list: non_empty_expr_list
   33          | %empty

   34 non_empty_expr_list: non_empty_expr_list ',' expr
   35                    | expr

   36 non_empty_argu_list: non_empty_argu_list ',' argu_decl
   37                    | argu_decl

   38 identifier_list: non_empty_id_list

   39 non_empty_id_list: non_empty_id_list ',' identifier
   40                  | non_empty_id_list ',' identifier_with_init
   41                  | non_empty_id_list ',' array_identifier
   42                  | non_empty_id_list ',' array_identifier_with_init
   43                  | identifier_with_init
   44                  | array_identifier_with_init
   45                  | identifier
   46                  | array_identifier

   47 const_list: non_empty_const_list

   48 non_empty_const_list: non_empty_const_list ',' const_identifier_with_init
   49                     | const_identifier_with_init

   50 const_decl: CONST type const_list ';'

   51 var_decl: type identifier_list ';'

   52 func_decl: type identifier '(' argument_list ')' ';'

   53 argu_decl: type identifier
   54          | type array_identifier

   55 type: INT
   56     | CHAR
   57     | FLOAT
   58     | DOUBLE
   59     | VOID
   60     | BOOLEAN
   61     | BOOL
   62     | STRING

   63 assign_expr: identifier '=' expr
   64            | array_decl '=' expr
   65            | expr

   66 expr: expr binary_operator expr_T
   67     | unary_operator expr_T
   68     | expr_T

   69 expr_T: expr_F

   70 expr_F: '(' expr ')'
   71       | NUM
   72       | SCI
   73       | FLOATING
   74       | identifier or_func_call_array_idx
   75       | STR_CONST
   76       | TRUE
   77       | FALSE

   78 or_func_call_array_idx: '(' expr_list ')'
   79                       | array_idx
   80                       | %empty

   81 unary_operator: '-'
   82               | '!'

   83 binary_operator: '+'
   84                | '-'
   85                | '/'
   86                | '*'
   87                | '%'
   88                | GREATER
   89                | GREATER_EQUAL
   90                | EQUAL
   91                | NOT_EQUAL
   92                | LESS
   93                | LESS_EQUAL
   94                | AND
   95                | OR

   96 array_decl: array_decl '[' integer_literal ']'
   97           | '[' integer_literal ']'

   98 array_idx: array_idx '[' expr ']'
   99          | '[' expr ']'

  100 integer_literal: '-' NUM
  101                | NUM

  102 variable_reference: identifier or_array_idx

  103 or_array_idx: array_idx
  104             | %empty

  105 identifier: ID

  106 identifier_with_init: identifier '=' expr

  107 const_identifier_with_init: identifier '=' const_init_value

  108 const_init_value: NUM
  109                 | SCI
  110                 | FLOATING
  111                 | STR_CONST
  112                 | TRUE
  113                 | FALSE

  114 array_identifier: identifier array_decl

  115 array_identifier_with_init: identifier array_decl '=' '{' expr_list '}'


Terminals, with rules where they appear

$end (0) 0
'!' (33) 82
'%' (37) 87
'(' (40) 11 18 19 20 21 26 52 70 78
')' (41) 11 18 19 20 21 26 52 70 78
'*' (42) 86
'+' (43) 83
',' (44) 34 36 39 40 41 42 48
'-' (45) 81 84 100
'/' (47) 85
';' (59) 15 16 17 20 21 22 23 24 25 50 51 52
'=' (61) 15 63 64 106 107 115
'[' (91) 96 97 98 99
']' (93) 96 97 98 99
'{' (123) 11 18 19 20 21 27 115
'}' (125) 11 18 19 20 21 27 115
error (256)
ID (258) 105
NUM (259) 71 100 101 108
FLOATING (260) 73 110
SCI (261) 72 109
TRUE (262) 76 112
FALSE (263) 77 113
STR_CONST (264) 75 111
CONST (265) 50
INT (266) 55
CHAR (267) 56
FLOAT (268) 57
DOUBLE (269) 58
VOID (270) 59
BOOLEAN (271) 60
BOOL (272) 61
STRING (273) 62
DO (274) 20
ELSE (275) 27
IF (276) 18
WHILE (277) 19 20
FOR (278) 21
CONTINUE (279) 24
BREAK (280) 23
RETURN (281) 22
READ (282) 17
PRINT (283) 16
LESS (284) 92
LESS_EQUAL (285) 93
EQUAL (286) 90
GREATER (287) 88
GREATER_EQUAL (288) 89
NOT_EQUAL (289) 91
AND (290) 94
OR (291) 95


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
decl_and_def_list (54)
    on left: 2 3, on right: 1 3
accept_decl_and_def_list (55)
    on left: 4 5 6, on right: 5 7
def_list (56)
    on left: 7, on right: 2 4
declaration (57)
    on left: 8 9 10, on right: 3 5 12
definition (58)
    on left: 11, on right: 7
compound (59)
    on left: 12 13 14, on right: 11 12 13 18 19 20 21 27
statement (60)
    on left: 15 16 17 18 19 20 21 22 23 24 25, on right: 13
function_call (61)
    on left: 26, on right: 25
orelse (62)
    on left: 27 28, on right: 18
print_argu (63)
    on left: 29, on right: 16
argument_list (64)
    on left: 30 31, on right: 11 52
expr_list (65)
    on left: 32 33, on right: 26 78 115
non_empty_expr_list (66)
    on left: 34 35, on right: 32 34
non_empty_argu_list (67)
    on left: 36 37, on right: 30 36
identifier_list (68)
    on left: 38, on right: 51
non_empty_id_list (69)
    on left: 39 40 41 42 43 44 45 46, on right: 38 39 40 41 42
const_list (70)
    on left: 47, on right: 50
non_empty_const_list (71)
    on left: 48 49, on right: 47 48
const_decl (72)
    on left: 50, on right: 8
var_decl (73)
    on left: 51, on right: 9
func_decl (74)
    on left: 52, on right: 10
argu_decl (75)
    on left: 53 54, on right: 36 37
type (76)
    on left: 55 56 57 58 59 60 61 62, on right: 11 50 51 52 53 54
assign_expr (77)
    on left: 63 64 65, on right: 21
expr (78)
    on left: 66 67 68, on right: 15 18 19 20 22 29 34 35 63 64 65 66
    70 98 99 106
expr_T (79)
    on left: 69, on right: 66 67 68
expr_F (80)
    on left: 70 71 72 73 74 75 76 77, on right: 69
or_func_call_array_idx (81)
    on left: 78 79 80, on right: 74
unary_operator (82)
    on left: 81 82, on right: 67
binary_operator (83)
    on left: 83 84 85 86 87 88 89 90 91 92 93 94 95, on right: 66
array_decl (84)
    on left: 96 97, on right: 64 96 114 115
array_idx (85)
    on left: 98 99, on right: 79 98 103
integer_literal (86)
    on left: 100 101, on right: 96 97
variable_reference (87)
    on left: 102, on right: 15 17
or_array_idx (88)
    on left: 103 104, on right: 102
identifier (89)
    on left: 105, on right: 11 26 39 45 52 53 63 74 102 106 107 114
    115
identifier_with_init (90)
    on left: 106, on right: 40 43
const_identifier_with_init (91)
    on left: 107, on right: 48 49
const_init_value (92)
    on left: 108 109 110 111 112 113, on right: 107
array_identifier (93)
    on left: 114, on right: 41 46 54
array_identifier_with_init (94)
    on left: 115, on right: 42 44


State 0

    0 $accept: . program $end

    CONST    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    program            go to state 10
    decl_and_def_list  go to state 11
    def_list           go to state 12
    declaration        go to state 13
    definition         go to state 14
    const_decl         go to state 15
    var_decl           go to state 16
    func_decl          go to state 17
    type               go to state 18


State 1

   50 const_decl: CONST . type const_list ';'

    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    type  go to state 19


State 2

   55 type: INT .

    $default  reduce using rule 55 (type)


State 3

   56 type: CHAR .

    $default  reduce using rule 56 (type)


State 4

   57 type: FLOAT .

    $default  reduce using rule 57 (type)


State 5

   58 type: DOUBLE .

    $default  reduce using rule 58 (type)


State 6

   59 type: VOID .

    $default  reduce using rule 59 (type)


State 7

   60 type: BOOLEAN .

    $default  reduce using rule 60 (type)


State 8

   61 type: BOOL .

    $default  reduce using rule 61 (type)


State 9

   62 type: STRING .

    $default  reduce using rule 62 (type)


State 10

    0 $accept: program . $end

    $end  shift, and go to state 20


State 11

    1 program: decl_and_def_list .

    $default  reduce using rule 1 (program)


State 12

    2 decl_and_def_list: def_list .

    $default  reduce using rule 2 (decl_and_def_list)


State 13

    3 decl_and_def_list: declaration . decl_and_def_list

    CONST    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    decl_and_def_list  go to state 21
    def_list           go to state 12
    declaration        go to state 13
    definition         go to state 14
    const_decl         go to state 15
    var_decl           go to state 16
    func_decl          go to state 17
    type               go to state 18


State 14

    7 def_list: definition . accept_decl_and_def_list

    CONST    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    $default  reduce using rule 6 (accept_decl_and_def_list)

    accept_decl_and_def_list  go to state 22
    def_list                  go to state 23
    declaration               go to state 24
    definition                go to state 14
    const_decl                go to state 15
    var_decl                  go to state 16
    func_decl                 go to state 17
    type                      go to state 18


State 15

    8 declaration: const_decl .

    $default  reduce using rule 8 (declaration)


State 16

    9 declaration: var_decl .

    $default  reduce using rule 9 (declaration)


State 17

   10 declaration: func_decl .

    $default  reduce using rule 10 (declaration)


State 18

   11 definition: type . identifier '(' argument_list ')' '{' compound '}'
   51 var_decl: type . identifier_list ';'
   52 func_decl: type . identifier '(' argument_list ')' ';'

    ID  shift, and go to state 25

    identifier_list             go to state 26
    non_empty_id_list           go to state 27
    identifier                  go to state 28
    identifier_with_init        go to state 29
    array_identifier            go to state 30
    array_identifier_with_init  go to state 31


State 19

   50 const_decl: CONST type . const_list ';'

    ID  shift, and go to state 25

    const_list                  go to state 32
    non_empty_const_list        go to state 33
    identifier                  go to state 34
    const_identifier_with_init  go to state 35


State 20

    0 $accept: program $end .

    $default  accept


State 21

    3 decl_and_def_list: declaration decl_and_def_list .

    $default  reduce using rule 3 (decl_and_def_list)


State 22

    7 def_list: definition accept_decl_and_def_list .

    $default  reduce using rule 7 (def_list)


State 23

    4 accept_decl_and_def_list: def_list .

    $default  reduce using rule 4 (accept_decl_and_def_list)


State 24

    5 accept_decl_and_def_list: declaration . accept_decl_and_def_list

    CONST    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    $default  reduce using rule 6 (accept_decl_and_def_list)

    accept_decl_and_def_list  go to state 36
    def_list                  go to state 23
    declaration               go to state 24
    definition                go to state 14
    const_decl                go to state 15
    var_decl                  go to state 16
    func_decl                 go to state 17
    type                      go to state 18


State 25

  105 identifier: ID .

    $default  reduce using rule 105 (identifier)


State 26

   51 var_decl: type identifier_list . ';'

    ';'  shift, and go to state 37


State 27

   38 identifier_list: non_empty_id_list .
   39 non_empty_id_list: non_empty_id_list . ',' identifier
   40                  | non_empty_id_list . ',' identifier_with_init
   41                  | non_empty_id_list . ',' array_identifier
   42                  | non_empty_id_list . ',' array_identifier_with_init

    ','  shift, and go to state 38

    $default  reduce using rule 38 (identifier_list)


State 28

   11 definition: type identifier . '(' argument_list ')' '{' compound '}'
   45 non_empty_id_list: identifier .
   52 func_decl: type identifier . '(' argument_list ')' ';'
  106 identifier_with_init: identifier . '=' expr
  114 array_identifier: identifier . array_decl
  115 array_identifier_with_init: identifier . array_decl '=' '{' expr_list '}'

    '='  shift, and go to state 39
    '('  shift, and go to state 40
    '['  shift, and go to state 41

    $default  reduce using rule 45 (non_empty_id_list)

    array_decl  go to state 42


State 29

   43 non_empty_id_list: identifier_with_init .

    $default  reduce using rule 43 (non_empty_id_list)


State 30

   46 non_empty_id_list: array_identifier .

    $default  reduce using rule 46 (non_empty_id_list)


State 31

   44 non_empty_id_list: array_identifier_with_init .

    $default  reduce using rule 44 (non_empty_id_list)


State 32

   50 const_decl: CONST type const_list . ';'

    ';'  shift, and go to state 43


State 33

   47 const_list: non_empty_const_list .
   48 non_empty_const_list: non_empty_const_list . ',' const_identifier_with_init

    ','  shift, and go to state 44

    $default  reduce using rule 47 (const_list)


State 34

  107 const_identifier_with_init: identifier . '=' const_init_value

    '='  shift, and go to state 45


State 35

   49 non_empty_const_list: const_identifier_with_init .

    $default  reduce using rule 49 (non_empty_const_list)


State 36

    5 accept_decl_and_def_list: declaration accept_decl_and_def_list .

    $default  reduce using rule 5 (accept_decl_and_def_list)


State 37

   51 var_decl: type identifier_list ';' .

    $default  reduce using rule 51 (var_decl)


State 38

   39 non_empty_id_list: non_empty_id_list ',' . identifier
   40                  | non_empty_id_list ',' . identifier_with_init
   41                  | non_empty_id_list ',' . array_identifier
   42                  | non_empty_id_list ',' . array_identifier_with_init

    ID  shift, and go to state 25

    identifier                  go to state 46
    identifier_with_init        go to state 47
    array_identifier            go to state 48
    array_identifier_with_init  go to state 49


State 39

  106 identifier_with_init: identifier '=' . expr

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 59
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 40

   11 definition: type identifier '(' . argument_list ')' '{' compound '}'
   52 func_decl: type identifier '(' . argument_list ')' ';'

    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    $default  reduce using rule 31 (argument_list)

    argument_list        go to state 64
    non_empty_argu_list  go to state 65
    argu_decl            go to state 66
    type                 go to state 67


State 41

   97 array_decl: '[' . integer_literal ']'

    NUM  shift, and go to state 68
    '-'  shift, and go to state 69

    integer_literal  go to state 70


State 42

   96 array_decl: array_decl . '[' integer_literal ']'
  114 array_identifier: identifier array_decl .
  115 array_identifier_with_init: identifier array_decl . '=' '{' expr_list '}'

    '='  shift, and go to state 71
    '['  shift, and go to state 72

    $default  reduce using rule 114 (array_identifier)


State 43

   50 const_decl: CONST type const_list ';' .

    $default  reduce using rule 50 (const_decl)


State 44

   48 non_empty_const_list: non_empty_const_list ',' . const_identifier_with_init

    ID  shift, and go to state 25

    identifier                  go to state 34
    const_identifier_with_init  go to state 73


State 45

  107 const_identifier_with_init: identifier '=' . const_init_value

    NUM        shift, and go to state 74
    FLOATING   shift, and go to state 75
    SCI        shift, and go to state 76
    TRUE       shift, and go to state 77
    FALSE      shift, and go to state 78
    STR_CONST  shift, and go to state 79

    const_init_value  go to state 80


State 46

   39 non_empty_id_list: non_empty_id_list ',' identifier .
  106 identifier_with_init: identifier . '=' expr
  114 array_identifier: identifier . array_decl
  115 array_identifier_with_init: identifier . array_decl '=' '{' expr_list '}'

    '='  shift, and go to state 39
    '['  shift, and go to state 41

    $default  reduce using rule 39 (non_empty_id_list)

    array_decl  go to state 42


State 47

   40 non_empty_id_list: non_empty_id_list ',' identifier_with_init .

    $default  reduce using rule 40 (non_empty_id_list)


State 48

   41 non_empty_id_list: non_empty_id_list ',' array_identifier .

    $default  reduce using rule 41 (non_empty_id_list)


State 49

   42 non_empty_id_list: non_empty_id_list ',' array_identifier_with_init .

    $default  reduce using rule 42 (non_empty_id_list)


State 50

   71 expr_F: NUM .

    $default  reduce using rule 71 (expr_F)


State 51

   73 expr_F: FLOATING .

    $default  reduce using rule 73 (expr_F)


State 52

   72 expr_F: SCI .

    $default  reduce using rule 72 (expr_F)


State 53

   76 expr_F: TRUE .

    $default  reduce using rule 76 (expr_F)


State 54

   77 expr_F: FALSE .

    $default  reduce using rule 77 (expr_F)


State 55

   75 expr_F: STR_CONST .

    $default  reduce using rule 75 (expr_F)


State 56

   81 unary_operator: '-' .

    $default  reduce using rule 81 (unary_operator)


State 57

   82 unary_operator: '!' .

    $default  reduce using rule 82 (unary_operator)


State 58

   70 expr_F: '(' . expr ')'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 81
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 59

   66 expr: expr . binary_operator expr_T
  106 identifier_with_init: identifier '=' expr .

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 106 (identifier_with_init)

    binary_operator  go to state 95


State 60

   68 expr: expr_T .

    $default  reduce using rule 68 (expr)


State 61

   69 expr_T: expr_F .

    $default  reduce using rule 69 (expr_T)


State 62

   67 expr: unary_operator . expr_T

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '('        shift, and go to state 58

    expr_T      go to state 96
    expr_F      go to state 61
    identifier  go to state 63


State 63

   74 expr_F: identifier . or_func_call_array_idx

    '('  shift, and go to state 97
    '['  shift, and go to state 98

    $default  reduce using rule 80 (or_func_call_array_idx)

    or_func_call_array_idx  go to state 99
    array_idx               go to state 100


State 64

   11 definition: type identifier '(' argument_list . ')' '{' compound '}'
   52 func_decl: type identifier '(' argument_list . ')' ';'

    ')'  shift, and go to state 101


State 65

   30 argument_list: non_empty_argu_list .
   36 non_empty_argu_list: non_empty_argu_list . ',' argu_decl

    ','  shift, and go to state 102

    $default  reduce using rule 30 (argument_list)


State 66

   37 non_empty_argu_list: argu_decl .

    $default  reduce using rule 37 (non_empty_argu_list)


State 67

   53 argu_decl: type . identifier
   54          | type . array_identifier

    ID  shift, and go to state 25

    identifier        go to state 103
    array_identifier  go to state 104


State 68

  101 integer_literal: NUM .

    $default  reduce using rule 101 (integer_literal)


State 69

  100 integer_literal: '-' . NUM

    NUM  shift, and go to state 105


State 70

   97 array_decl: '[' integer_literal . ']'

    ']'  shift, and go to state 106


State 71

  115 array_identifier_with_init: identifier array_decl '=' . '{' expr_list '}'

    '{'  shift, and go to state 107


State 72

   96 array_decl: array_decl '[' . integer_literal ']'

    NUM  shift, and go to state 68
    '-'  shift, and go to state 69

    integer_literal  go to state 108


State 73

   48 non_empty_const_list: non_empty_const_list ',' const_identifier_with_init .

    $default  reduce using rule 48 (non_empty_const_list)


State 74

  108 const_init_value: NUM .

    $default  reduce using rule 108 (const_init_value)


State 75

  110 const_init_value: FLOATING .

    $default  reduce using rule 110 (const_init_value)


State 76

  109 const_init_value: SCI .

    $default  reduce using rule 109 (const_init_value)


State 77

  112 const_init_value: TRUE .

    $default  reduce using rule 112 (const_init_value)


State 78

  113 const_init_value: FALSE .

    $default  reduce using rule 113 (const_init_value)


State 79

  111 const_init_value: STR_CONST .

    $default  reduce using rule 111 (const_init_value)


State 80

  107 const_identifier_with_init: identifier '=' const_init_value .

    $default  reduce using rule 107 (const_identifier_with_init)


State 81

   66 expr: expr . binary_operator expr_T
   70 expr_F: '(' expr . ')'

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    ')'            shift, and go to state 109
    '%'            shift, and go to state 94

    binary_operator  go to state 95


State 82

   92 binary_operator: LESS .

    $default  reduce using rule 92 (binary_operator)


State 83

   93 binary_operator: LESS_EQUAL .

    $default  reduce using rule 93 (binary_operator)


State 84

   90 binary_operator: EQUAL .

    $default  reduce using rule 90 (binary_operator)


State 85

   88 binary_operator: GREATER .

    $default  reduce using rule 88 (binary_operator)


State 86

   89 binary_operator: GREATER_EQUAL .

    $default  reduce using rule 89 (binary_operator)


State 87

   91 binary_operator: NOT_EQUAL .

    $default  reduce using rule 91 (binary_operator)


State 88

   94 binary_operator: AND .

    $default  reduce using rule 94 (binary_operator)


State 89

   95 binary_operator: OR .

    $default  reduce using rule 95 (binary_operator)


State 90

   83 binary_operator: '+' .

    $default  reduce using rule 83 (binary_operator)


State 91

   84 binary_operator: '-' .

    $default  reduce using rule 84 (binary_operator)


State 92

   86 binary_operator: '*' .

    $default  reduce using rule 86 (binary_operator)


State 93

   85 binary_operator: '/' .

    $default  reduce using rule 85 (binary_operator)


State 94

   87 binary_operator: '%' .

    $default  reduce using rule 87 (binary_operator)


State 95

   66 expr: expr binary_operator . expr_T

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '('        shift, and go to state 58

    expr_T      go to state 110
    expr_F      go to state 61
    identifier  go to state 63


State 96

   67 expr: unary_operator expr_T .

    $default  reduce using rule 67 (expr)


State 97

   78 or_func_call_array_idx: '(' . expr_list ')'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    $default  reduce using rule 33 (expr_list)

    expr_list            go to state 111
    non_empty_expr_list  go to state 112
    expr                 go to state 113
    expr_T               go to state 60
    expr_F               go to state 61
    unary_operator       go to state 62
    identifier           go to state 63


State 98

   99 array_idx: '[' . expr ']'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 114
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 99

   74 expr_F: identifier or_func_call_array_idx .

    $default  reduce using rule 74 (expr_F)


State 100

   79 or_func_call_array_idx: array_idx .
   98 array_idx: array_idx . '[' expr ']'

    '['  shift, and go to state 115

    $default  reduce using rule 79 (or_func_call_array_idx)


State 101

   11 definition: type identifier '(' argument_list ')' . '{' compound '}'
   52 func_decl: type identifier '(' argument_list ')' . ';'

    '{'  shift, and go to state 116
    ';'  shift, and go to state 117


State 102

   36 non_empty_argu_list: non_empty_argu_list ',' . argu_decl

    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    argu_decl  go to state 118
    type       go to state 67


State 103

   53 argu_decl: type identifier .
  114 array_identifier: identifier . array_decl

    '['  shift, and go to state 41

    $default  reduce using rule 53 (argu_decl)

    array_decl  go to state 119


State 104

   54 argu_decl: type array_identifier .

    $default  reduce using rule 54 (argu_decl)


State 105

  100 integer_literal: '-' NUM .

    $default  reduce using rule 100 (integer_literal)


State 106

   97 array_decl: '[' integer_literal ']' .

    $default  reduce using rule 97 (array_decl)


State 107

  115 array_identifier_with_init: identifier array_decl '=' '{' . expr_list '}'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    $default  reduce using rule 33 (expr_list)

    expr_list            go to state 120
    non_empty_expr_list  go to state 112
    expr                 go to state 113
    expr_T               go to state 60
    expr_F               go to state 61
    unary_operator       go to state 62
    identifier           go to state 63


State 108

   96 array_decl: array_decl '[' integer_literal . ']'

    ']'  shift, and go to state 121


State 109

   70 expr_F: '(' expr ')' .

    $default  reduce using rule 70 (expr_F)


State 110

   66 expr: expr binary_operator expr_T .

    $default  reduce using rule 66 (expr)


State 111

   78 or_func_call_array_idx: '(' expr_list . ')'

    ')'  shift, and go to state 122


State 112

   32 expr_list: non_empty_expr_list .
   34 non_empty_expr_list: non_empty_expr_list . ',' expr

    ','  shift, and go to state 123

    $default  reduce using rule 32 (expr_list)


State 113

   35 non_empty_expr_list: expr .
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 35 (non_empty_expr_list)

    binary_operator  go to state 95


State 114

   66 expr: expr . binary_operator expr_T
   99 array_idx: '[' expr . ']'

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94
    ']'            shift, and go to state 124

    binary_operator  go to state 95


State 115

   98 array_idx: array_idx '[' . expr ']'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 125
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 116

   11 definition: type identifier '(' argument_list ')' '{' . compound '}'

    $default  reduce using rule 14 (compound)

    compound  go to state 126


State 117

   52 func_decl: type identifier '(' argument_list ')' ';' .

    $default  reduce using rule 52 (func_decl)


State 118

   36 non_empty_argu_list: non_empty_argu_list ',' argu_decl .

    $default  reduce using rule 36 (non_empty_argu_list)


State 119

   96 array_decl: array_decl . '[' integer_literal ']'
  114 array_identifier: identifier array_decl .

    '['  shift, and go to state 72

    $default  reduce using rule 114 (array_identifier)


State 120

  115 array_identifier_with_init: identifier array_decl '=' '{' expr_list . '}'

    '}'  shift, and go to state 127


State 121

   96 array_decl: array_decl '[' integer_literal ']' .

    $default  reduce using rule 96 (array_decl)


State 122

   78 or_func_call_array_idx: '(' expr_list ')' .

    $default  reduce using rule 78 (or_func_call_array_idx)


State 123

   34 non_empty_expr_list: non_empty_expr_list ',' . expr

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 128
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 124

   99 array_idx: '[' expr ']' .

    $default  reduce using rule 99 (array_idx)


State 125

   66 expr: expr . binary_operator expr_T
   98 array_idx: array_idx '[' expr . ']'

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94
    ']'            shift, and go to state 129

    binary_operator  go to state 95


State 126

   11 definition: type identifier '(' argument_list ')' '{' compound . '}'
   12 compound: compound . declaration
   13         | compound . statement

    ID        shift, and go to state 25
    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    VOID      shift, and go to state 6
    BOOLEAN   shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    DO        shift, and go to state 130
    IF        shift, and go to state 131
    WHILE     shift, and go to state 132
    FOR       shift, and go to state 133
    CONTINUE  shift, and go to state 134
    BREAK     shift, and go to state 135
    RETURN    shift, and go to state 136
    READ      shift, and go to state 137
    PRINT     shift, and go to state 138
    '}'       shift, and go to state 139

    declaration         go to state 140
    statement           go to state 141
    function_call       go to state 142
    const_decl          go to state 15
    var_decl            go to state 16
    func_decl           go to state 17
    type                go to state 143
    variable_reference  go to state 144
    identifier          go to state 145


State 127

  115 array_identifier_with_init: identifier array_decl '=' '{' expr_list '}' .

    $default  reduce using rule 115 (array_identifier_with_init)


State 128

   34 non_empty_expr_list: non_empty_expr_list ',' expr .
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 34 (non_empty_expr_list)

    binary_operator  go to state 95


State 129

   98 array_idx: array_idx '[' expr ']' .

    $default  reduce using rule 98 (array_idx)


State 130

   20 statement: DO . '{' compound '}' WHILE '(' expr ')' ';'

    '{'  shift, and go to state 146


State 131

   18 statement: IF . '(' expr ')' '{' compound '}' orelse

    '('  shift, and go to state 147


State 132

   19 statement: WHILE . '(' expr ')' '{' compound '}'

    '('  shift, and go to state 148


State 133

   21 statement: FOR . '(' assign_expr ';' assign_expr ';' assign_expr ')' '{' compound '}'

    '('  shift, and go to state 149


State 134

   24 statement: CONTINUE . ';'

    ';'  shift, and go to state 150


State 135

   23 statement: BREAK . ';'

    ';'  shift, and go to state 151


State 136

   22 statement: RETURN . expr ';'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 152
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 137

   17 statement: READ . variable_reference ';'

    ID  shift, and go to state 25

    variable_reference  go to state 153
    identifier          go to state 154


State 138

   16 statement: PRINT . print_argu ';'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    print_argu      go to state 155
    expr            go to state 156
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 139

   11 definition: type identifier '(' argument_list ')' '{' compound '}' .

    $default  reduce using rule 11 (definition)


State 140

   12 compound: compound declaration .

    $default  reduce using rule 12 (compound)


State 141

   13 compound: compound statement .

    $default  reduce using rule 13 (compound)


State 142

   25 statement: function_call . ';'

    ';'  shift, and go to state 157


State 143

   51 var_decl: type . identifier_list ';'
   52 func_decl: type . identifier '(' argument_list ')' ';'

    ID  shift, and go to state 25

    identifier_list             go to state 26
    non_empty_id_list           go to state 27
    identifier                  go to state 158
    identifier_with_init        go to state 29
    array_identifier            go to state 30
    array_identifier_with_init  go to state 31


State 144

   15 statement: variable_reference . '=' expr ';'

    '='  shift, and go to state 159


State 145

   26 function_call: identifier . '(' expr_list ')'
  102 variable_reference: identifier . or_array_idx

    '('  shift, and go to state 160
    '['  shift, and go to state 98

    $default  reduce using rule 104 (or_array_idx)

    array_idx     go to state 161
    or_array_idx  go to state 162


State 146

   20 statement: DO '{' . compound '}' WHILE '(' expr ')' ';'

    $default  reduce using rule 14 (compound)

    compound  go to state 163


State 147

   18 statement: IF '(' . expr ')' '{' compound '}' orelse

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 164
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 148

   19 statement: WHILE '(' . expr ')' '{' compound '}'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 165
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 149

   21 statement: FOR '(' . assign_expr ';' assign_expr ';' assign_expr ')' '{' compound '}'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58
    '['        shift, and go to state 41

    assign_expr     go to state 166
    expr            go to state 167
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    array_decl      go to state 168
    identifier      go to state 169


State 150

   24 statement: CONTINUE ';' .

    $default  reduce using rule 24 (statement)


State 151

   23 statement: BREAK ';' .

    $default  reduce using rule 23 (statement)


State 152

   22 statement: RETURN expr . ';'
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    ';'            shift, and go to state 170
    '%'            shift, and go to state 94

    binary_operator  go to state 95


State 153

   17 statement: READ variable_reference . ';'

    ';'  shift, and go to state 171


State 154

  102 variable_reference: identifier . or_array_idx

    '['  shift, and go to state 98

    $default  reduce using rule 104 (or_array_idx)

    array_idx     go to state 161
    or_array_idx  go to state 162


State 155

   16 statement: PRINT print_argu . ';'

    ';'  shift, and go to state 172


State 156

   29 print_argu: expr .
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 29 (print_argu)

    binary_operator  go to state 95


State 157

   25 statement: function_call ';' .

    $default  reduce using rule 25 (statement)


State 158

   45 non_empty_id_list: identifier .
   52 func_decl: type identifier . '(' argument_list ')' ';'
  106 identifier_with_init: identifier . '=' expr
  114 array_identifier: identifier . array_decl
  115 array_identifier_with_init: identifier . array_decl '=' '{' expr_list '}'

    '='  shift, and go to state 39
    '('  shift, and go to state 173
    '['  shift, and go to state 41

    $default  reduce using rule 45 (non_empty_id_list)

    array_decl  go to state 42


State 159

   15 statement: variable_reference '=' . expr ';'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 174
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 160

   26 function_call: identifier '(' . expr_list ')'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    $default  reduce using rule 33 (expr_list)

    expr_list            go to state 175
    non_empty_expr_list  go to state 112
    expr                 go to state 113
    expr_T               go to state 60
    expr_F               go to state 61
    unary_operator       go to state 62
    identifier           go to state 63


State 161

   98 array_idx: array_idx . '[' expr ']'
  103 or_array_idx: array_idx .

    '['  shift, and go to state 115

    $default  reduce using rule 103 (or_array_idx)


State 162

  102 variable_reference: identifier or_array_idx .

    $default  reduce using rule 102 (variable_reference)


State 163

   12 compound: compound . declaration
   13         | compound . statement
   20 statement: DO '{' compound . '}' WHILE '(' expr ')' ';'

    ID        shift, and go to state 25
    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    VOID      shift, and go to state 6
    BOOLEAN   shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    DO        shift, and go to state 130
    IF        shift, and go to state 131
    WHILE     shift, and go to state 132
    FOR       shift, and go to state 133
    CONTINUE  shift, and go to state 134
    BREAK     shift, and go to state 135
    RETURN    shift, and go to state 136
    READ      shift, and go to state 137
    PRINT     shift, and go to state 138
    '}'       shift, and go to state 176

    declaration         go to state 140
    statement           go to state 141
    function_call       go to state 142
    const_decl          go to state 15
    var_decl            go to state 16
    func_decl           go to state 17
    type                go to state 143
    variable_reference  go to state 144
    identifier          go to state 145


State 164

   18 statement: IF '(' expr . ')' '{' compound '}' orelse
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    ')'            shift, and go to state 177
    '%'            shift, and go to state 94

    binary_operator  go to state 95


State 165

   19 statement: WHILE '(' expr . ')' '{' compound '}'
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    ')'            shift, and go to state 178
    '%'            shift, and go to state 94

    binary_operator  go to state 95


State 166

   21 statement: FOR '(' assign_expr . ';' assign_expr ';' assign_expr ')' '{' compound '}'

    ';'  shift, and go to state 179


State 167

   65 assign_expr: expr .
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 65 (assign_expr)

    binary_operator  go to state 95


State 168

   64 assign_expr: array_decl . '=' expr
   96 array_decl: array_decl . '[' integer_literal ']'

    '='  shift, and go to state 180
    '['  shift, and go to state 72


State 169

   63 assign_expr: identifier . '=' expr
   74 expr_F: identifier . or_func_call_array_idx

    '='  shift, and go to state 181
    '('  shift, and go to state 97
    '['  shift, and go to state 98

    $default  reduce using rule 80 (or_func_call_array_idx)

    or_func_call_array_idx  go to state 99
    array_idx               go to state 100


State 170

   22 statement: RETURN expr ';' .

    $default  reduce using rule 22 (statement)


State 171

   17 statement: READ variable_reference ';' .

    $default  reduce using rule 17 (statement)


State 172

   16 statement: PRINT print_argu ';' .

    $default  reduce using rule 16 (statement)


State 173

   52 func_decl: type identifier '(' . argument_list ')' ';'

    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    FLOAT    shift, and go to state 4
    DOUBLE   shift, and go to state 5
    VOID     shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    BOOL     shift, and go to state 8
    STRING   shift, and go to state 9

    $default  reduce using rule 31 (argument_list)

    argument_list        go to state 182
    non_empty_argu_list  go to state 65
    argu_decl            go to state 66
    type                 go to state 67


State 174

   15 statement: variable_reference '=' expr . ';'
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    ';'            shift, and go to state 183
    '%'            shift, and go to state 94

    binary_operator  go to state 95


State 175

   26 function_call: identifier '(' expr_list . ')'

    ')'  shift, and go to state 184


State 176

   20 statement: DO '{' compound '}' . WHILE '(' expr ')' ';'

    WHILE  shift, and go to state 185


State 177

   18 statement: IF '(' expr ')' . '{' compound '}' orelse

    '{'  shift, and go to state 186


State 178

   19 statement: WHILE '(' expr ')' . '{' compound '}'

    '{'  shift, and go to state 187


State 179

   21 statement: FOR '(' assign_expr ';' . assign_expr ';' assign_expr ')' '{' compound '}'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58
    '['        shift, and go to state 41

    assign_expr     go to state 188
    expr            go to state 167
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    array_decl      go to state 168
    identifier      go to state 169


State 180

   64 assign_expr: array_decl '=' . expr

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 189
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 181

   63 assign_expr: identifier '=' . expr

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 190
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 182

   52 func_decl: type identifier '(' argument_list . ')' ';'

    ')'  shift, and go to state 191


State 183

   15 statement: variable_reference '=' expr ';' .

    $default  reduce using rule 15 (statement)


State 184

   26 function_call: identifier '(' expr_list ')' .

    $default  reduce using rule 26 (function_call)


State 185

   20 statement: DO '{' compound '}' WHILE . '(' expr ')' ';'

    '('  shift, and go to state 192


State 186

   18 statement: IF '(' expr ')' '{' . compound '}' orelse

    $default  reduce using rule 14 (compound)

    compound  go to state 193


State 187

   19 statement: WHILE '(' expr ')' '{' . compound '}'

    $default  reduce using rule 14 (compound)

    compound  go to state 194


State 188

   21 statement: FOR '(' assign_expr ';' assign_expr . ';' assign_expr ')' '{' compound '}'

    ';'  shift, and go to state 195


State 189

   64 assign_expr: array_decl '=' expr .
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 64 (assign_expr)

    binary_operator  go to state 95


State 190

   63 assign_expr: identifier '=' expr .
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    '%'            shift, and go to state 94

    $default  reduce using rule 63 (assign_expr)

    binary_operator  go to state 95


State 191

   52 func_decl: type identifier '(' argument_list ')' . ';'

    ';'  shift, and go to state 117


State 192

   20 statement: DO '{' compound '}' WHILE '(' . expr ')' ';'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58

    expr            go to state 196
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    identifier      go to state 63


State 193

   12 compound: compound . declaration
   13         | compound . statement
   18 statement: IF '(' expr ')' '{' compound . '}' orelse

    ID        shift, and go to state 25
    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    VOID      shift, and go to state 6
    BOOLEAN   shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    DO        shift, and go to state 130
    IF        shift, and go to state 131
    WHILE     shift, and go to state 132
    FOR       shift, and go to state 133
    CONTINUE  shift, and go to state 134
    BREAK     shift, and go to state 135
    RETURN    shift, and go to state 136
    READ      shift, and go to state 137
    PRINT     shift, and go to state 138
    '}'       shift, and go to state 197

    declaration         go to state 140
    statement           go to state 141
    function_call       go to state 142
    const_decl          go to state 15
    var_decl            go to state 16
    func_decl           go to state 17
    type                go to state 143
    variable_reference  go to state 144
    identifier          go to state 145


State 194

   12 compound: compound . declaration
   13         | compound . statement
   19 statement: WHILE '(' expr ')' '{' compound . '}'

    ID        shift, and go to state 25
    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    VOID      shift, and go to state 6
    BOOLEAN   shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    DO        shift, and go to state 130
    IF        shift, and go to state 131
    WHILE     shift, and go to state 132
    FOR       shift, and go to state 133
    CONTINUE  shift, and go to state 134
    BREAK     shift, and go to state 135
    RETURN    shift, and go to state 136
    READ      shift, and go to state 137
    PRINT     shift, and go to state 138
    '}'       shift, and go to state 198

    declaration         go to state 140
    statement           go to state 141
    function_call       go to state 142
    const_decl          go to state 15
    var_decl            go to state 16
    func_decl           go to state 17
    type                go to state 143
    variable_reference  go to state 144
    identifier          go to state 145


State 195

   21 statement: FOR '(' assign_expr ';' assign_expr ';' . assign_expr ')' '{' compound '}'

    ID         shift, and go to state 25
    NUM        shift, and go to state 50
    FLOATING   shift, and go to state 51
    SCI        shift, and go to state 52
    TRUE       shift, and go to state 53
    FALSE      shift, and go to state 54
    STR_CONST  shift, and go to state 55
    '-'        shift, and go to state 56
    '!'        shift, and go to state 57
    '('        shift, and go to state 58
    '['        shift, and go to state 41

    assign_expr     go to state 199
    expr            go to state 167
    expr_T          go to state 60
    expr_F          go to state 61
    unary_operator  go to state 62
    array_decl      go to state 168
    identifier      go to state 169


State 196

   20 statement: DO '{' compound '}' WHILE '(' expr . ')' ';'
   66 expr: expr . binary_operator expr_T

    LESS           shift, and go to state 82
    LESS_EQUAL     shift, and go to state 83
    EQUAL          shift, and go to state 84
    GREATER        shift, and go to state 85
    GREATER_EQUAL  shift, and go to state 86
    NOT_EQUAL      shift, and go to state 87
    AND            shift, and go to state 88
    OR             shift, and go to state 89
    '+'            shift, and go to state 90
    '-'            shift, and go to state 91
    '*'            shift, and go to state 92
    '/'            shift, and go to state 93
    ')'            shift, and go to state 200
    '%'            shift, and go to state 94

    binary_operator  go to state 95


State 197

   18 statement: IF '(' expr ')' '{' compound '}' . orelse

    ELSE  shift, and go to state 201

    $default  reduce using rule 28 (orelse)

    orelse  go to state 202


State 198

   19 statement: WHILE '(' expr ')' '{' compound '}' .

    $default  reduce using rule 19 (statement)


State 199

   21 statement: FOR '(' assign_expr ';' assign_expr ';' assign_expr . ')' '{' compound '}'

    ')'  shift, and go to state 203


State 200

   20 statement: DO '{' compound '}' WHILE '(' expr ')' . ';'

    ';'  shift, and go to state 204


State 201

   27 orelse: ELSE . '{' compound '}'

    '{'  shift, and go to state 205


State 202

   18 statement: IF '(' expr ')' '{' compound '}' orelse .

    $default  reduce using rule 18 (statement)


State 203

   21 statement: FOR '(' assign_expr ';' assign_expr ';' assign_expr ')' . '{' compound '}'

    '{'  shift, and go to state 206


State 204

   20 statement: DO '{' compound '}' WHILE '(' expr ')' ';' .

    $default  reduce using rule 20 (statement)


State 205

   27 orelse: ELSE '{' . compound '}'

    $default  reduce using rule 14 (compound)

    compound  go to state 207


State 206

   21 statement: FOR '(' assign_expr ';' assign_expr ';' assign_expr ')' '{' . compound '}'

    $default  reduce using rule 14 (compound)

    compound  go to state 208


State 207

   12 compound: compound . declaration
   13         | compound . statement
   27 orelse: ELSE '{' compound . '}'

    ID        shift, and go to state 25
    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    VOID      shift, and go to state 6
    BOOLEAN   shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    DO        shift, and go to state 130
    IF        shift, and go to state 131
    WHILE     shift, and go to state 132
    FOR       shift, and go to state 133
    CONTINUE  shift, and go to state 134
    BREAK     shift, and go to state 135
    RETURN    shift, and go to state 136
    READ      shift, and go to state 137
    PRINT     shift, and go to state 138
    '}'       shift, and go to state 209

    declaration         go to state 140
    statement           go to state 141
    function_call       go to state 142
    const_decl          go to state 15
    var_decl            go to state 16
    func_decl           go to state 17
    type                go to state 143
    variable_reference  go to state 144
    identifier          go to state 145


State 208

   12 compound: compound . declaration
   13         | compound . statement
   21 statement: FOR '(' assign_expr ';' assign_expr ';' assign_expr ')' '{' compound . '}'

    ID        shift, and go to state 25
    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    CHAR      shift, and go to state 3
    FLOAT     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    VOID      shift, and go to state 6
    BOOLEAN   shift, and go to state 7
    BOOL      shift, and go to state 8
    STRING    shift, and go to state 9
    DO        shift, and go to state 130
    IF        shift, and go to state 131
    WHILE     shift, and go to state 132
    FOR       shift, and go to state 133
    CONTINUE  shift, and go to state 134
    BREAK     shift, and go to state 135
    RETURN    shift, and go to state 136
    READ      shift, and go to state 137
    PRINT     shift, and go to state 138
    '}'       shift, and go to state 210

    declaration         go to state 140
    statement           go to state 141
    function_call       go to state 142
    const_decl          go to state 15
    var_decl            go to state 16
    func_decl           go to state 17
    type                go to state 143
    variable_reference  go to state 144
    identifier          go to state 145


State 209

   27 orelse: ELSE '{' compound '}' .

    $default  reduce using rule 27 (orelse)


State 210

   21 statement: FOR '(' assign_expr ';' assign_expr ';' assign_expr ')' '{' compound '}' .

    $default  reduce using rule 21 (statement)
